import sys

sys.path.append('../../parser')
from run_parser import extract_dataflow

js = {"function": "def get_counters(self, name=None, agent=None):  # pragma: no cover (hard to test, requires a running backup)\n        \"\"\"See :func:`burpui.misc.backend.interface.BUIbackend.get_counters`\"\"\"\n        res = {}\n        if agent:\n            if not name or name not in self.running[agent]:\n                return res\n        else:\n            if not name or name not in self.running:\n                return res\n        filemap = self.status('c:{0}\\n'.format(name))\n        if not filemap:\n            return res\n        for line in filemap:\n            # self._logger('debug', 'line: {0}'.format(line))\n            reg = re.search(r'^{0}\\s+(\\d)\\s+(\\S)\\s+(.+)$'.format(name), line)\n            if reg and reg.group(2) == 'r' and int(reg.group(1)) == 2:\n                count = 0\n                for val in reg.group(3).split('\\t'):\n                    # self._logger('debug', '{0}: {1}'.format(self.counters[c], v))\n                    if val and count > 0 and count < 15:\n                        try:\n                            vals = map(int, val.split('/'))\n                            if vals[0] > 0 or vals[1] > 0 or vals[2] or vals[3] > 0:\n                                res[self.counters[count]] = vals\n                        except (ValueError, IndexError):\n                            count += 1\n                            continue\n                    elif val:\n                        if self.counters[count] == 'path':\n                            res[self.counters[count]] = val\n                        else:\n                            try:\n                                res[self.counters[count]] = int(val)\n                            except __HOLE__:\n                                count += 1\n                                continue\n                    count += 1\n\n        if 'bytes' not in res:\n            res['bytes'] = 0\n        if res.viewkeys() & {'start', 'estimated_bytes', 'bytes_in'}:\n            try:\n                diff = time.time() - int(res['start'])\n                byteswant = int(res['estimated_bytes'])\n                bytesgot = int(res['bytes_in'])\n                bytespersec = bytesgot / diff\n                bytesleft = byteswant - bytesgot\n                res['speed'] = bytespersec\n                if bytespersec > 0:\n                    timeleft = int(bytesleft / bytespersec)\n                    res['timeleft'] = timeleft\n                else:\n                    res['timeleft'] = -1\n            except:\n                res['timeleft'] = -1\n        try:\n            res['percent'] = round(float(res['bytes']) / float(res['estimated_bytes']) * 100)\n        except Exception:\n            # You know... division by 0\n            res['percent'] = 0\n        return res", "label": "ValueError", "info": "dataset/ETHPy150Open ziirish/burp-ui/burpui/misc/backend/burp1.py/Burp.get_counters"}

js = {"function": "def validate(self, modelXbrl, parameters=None):\n        if not hasattr(modelXbrl.modelDocument, \"xmlDocument\"): # not parsed\n            return\n        \n        self._isStandardUri = {}\n        modelXbrl.modelManager.disclosureSystem.loadStandardTaxonomiesDict()\n        \n        # find typedDomainRefs before validateXBRL pass\n        if modelXbrl.modelManager.disclosureSystem.SBRNL:\n            for pluginXbrlMethod in pluginClassMethods(\"Validate.SBRNL.Start\"):\n                pluginXbrlMethod(self, modelXbrl)\n            self.qnSbrLinkroleorder = ModelValue.qname(\"http://www.nltaxonomie.nl/5.0/basis/sbr/xbrl/xbrl-syntax-extension\",\"linkroleOrder\")\n\n            self.typedDomainQnames = set()\n            self.typedDomainElements = set()\n            for modelConcept in modelXbrl.qnameConcepts.values():\n                if modelConcept.isTypedDimension:\n                    typedDomainElement = modelConcept.typedDomainElement\n                    if isinstance(typedDomainElement, ModelConcept):\n                        self.typedDomainQnames.add(typedDomainElement.qname)\n                        self.typedDomainElements.add(typedDomainElement)\n\n        # note that some XFM tests are done by ValidateXbrl to prevent mulstiple node walks\n        super(ValidateFiling,self).validate(modelXbrl, parameters)\n        xbrlInstDoc = modelXbrl.modelDocument.xmlDocument.getroot()\n        disclosureSystem = self.disclosureSystem\n        disclosureSystemVersion = disclosureSystem.version\n        \n        modelXbrl.modelManager.showStatus(_(\"validating {0}\").format(disclosureSystem.name))\n        \n        self.modelXbrl.profileActivity()\n        conceptsUsed = {} # key=concept object value=True if has presentation label\n        labelsRelationshipSet = modelXbrl.relationshipSet(XbrlConst.conceptLabel)\n        if self.validateSBRNL:  # include generic labels in a (new) set\n            genLabelsRelationshipSet = modelXbrl.relationshipSet(XbrlConst.elementLabel)\n        presentationRelationshipSet = modelXbrl.relationshipSet(XbrlConst.parentChild)\n        referencesRelationshipSetWithProhibits = modelXbrl.relationshipSet(XbrlConst.conceptReference, includeProhibits=True)\n        self.modelXbrl.profileActivity(\"... cache lbl, pre, ref relationships\", minTimeToShow=1.0)\n        \n        validateInlineXbrlGFM = (modelXbrl.modelDocument.type == ModelDocument.Type.INLINEXBRL and\n                                 self.validateGFM)\n        validateEFMpragmatic = disclosureSystem.names and \"efm-pragmatic\" in disclosureSystem.names\n        self.validateLoggingSemantic = validateLoggingSemantic = (\n              modelXbrl.isLoggingEffectiveFor(level=\"WARNING-SEMANTIC\") or \n              modelXbrl.isLoggingEffectiveFor(level=\"ERROR-SEMANTIC\"))\n        \n        if self.validateEFM:\n            for pluginXbrlMethod in pluginClassMethods(\"Validate.EFM.Start\"):\n                pluginXbrlMethod(self)\n                \n        # instance checks\n        self.fileNameBasePart = None # prevent testing on fileNameParts if not instance or invalid\n        self.fileNameDate = None\n        self.entityRegistrantName = None\n        self.requiredContext = None\n        self.standardNamespaceConflicts = defaultdict(set)\n        self.exhibitType = None # e.g., EX-101, EX-201\n        if modelXbrl.modelDocument.type == ModelDocument.Type.INSTANCE or \\\n           modelXbrl.modelDocument.type == ModelDocument.Type.INLINEXBRL:\n            instanceName = modelXbrl.modelDocument.basename\n            \n            # parameter-provided CIKs and registrant names\n            paramFilerIdentifier = None\n            paramFilerIdentifiers = None\n            paramFilerNames = None\n            submissionType = None\n            if self.validateEFM and self.parameters:\n                p = self.parameters.get(ModelValue.qname(\"CIK\",noPrefixIsNoNamespace=True))\n                if p and len(p) == 2 and p[1] not in (\"null\", \"None\"):\n                    paramFilerIdentifier = p[1]\n                p = self.parameters.get(ModelValue.qname(\"cikList\",noPrefixIsNoNamespace=True))\n                if p and len(p) == 2:\n                    paramFilerIdentifiers = p[1].split(\",\")\n                p = self.parameters.get(ModelValue.qname(\"cikNameList\",noPrefixIsNoNamespace=True))\n                if p and len(p) == 2:\n                    paramFilerNames = p[1].split(\"|Edgar|\")\n                    if paramFilerIdentifiers and len(paramFilerIdentifiers) != len(paramFilerNames):\n                        self.modelXbrl.error((\"EFM.6.05.24.parameters\", \"GFM.3.02.02\"),\n                            _(\"parameters for cikList and cikNameList different list entry counts: %(cikList)s, %(cikNameList)s\"),\n                            modelXbrl=modelXbrl, cikList=paramFilerIdentifiers, cikNameList=paramFilerNames)\n                p = self.parameters.get(ModelValue.qname(\"submissionType\",noPrefixIsNoNamespace=True))\n                if p and len(p) == 2:\n                    submissionType = p[1]\n                p = self.parameters.get(ModelValue.qname(\"exhibitType\",noPrefixIsNoNamespace=True))\n                if p and len(p) == 2:\n                    self.exhibitType = p[1]\n                        \n\n            #6.3.3 filename check\n            m = instanceFileNamePattern.match(instanceName)\n            if (modelXbrl.modelDocument.type == ModelDocument.Type.INLINEXBRL\n                and any(name.startswith('efm') for name in disclosureSystem.names)):\n                m = htmlFileNamePattern.match(instanceName)\n                if m:\n                    self.fileNameBasePart = None # html file name not necessarily parseable.\n                    self.fileNameDatePart = None\n                else:\n                    modelXbrl.error(self.EFM60303,\n                                    _('Invalid inline xbrl document in {base}.htm\": %(filename)s'),\n                                    modelObject=modelXbrl.modelDocument, filename=instanceName,\n                                    messageCodes=(\"EFM.6.03.03\",))\n            elif m:\n                self.fileNameBasePart = m.group(1)\n                self.fileNameDatePart = m.group(2)\n                if not self.fileNameBasePart:\n                    modelXbrl.error((self.EFM60303, \"GFM.1.01.01\"),\n                        _('Invalid instance document base name part (ticker or mnemonic name) in \"{base}-{yyyymmdd}.xml\": %(filename)s'),\n                        modelObject=modelXbrl.modelDocument, filename=modelXbrl.modelDocument.basename,\n                        messageCodes=(\"EFM.6.03.03\", \"EFM.6.23.01\", \"GFM.1.01.01\"))\n                else:\n                    try:\n                        self.fileNameDate = datetime.datetime.strptime(self.fileNameDatePart,\"%Y%m%d\").date()\n                    except __HOLE__:\n                        modelXbrl.error((self.EFM60303, \"GFM.1.01.01\"),\n                            _('Invalid instance document base name part (date) in \"{base}-{yyyymmdd}.xml\": %(filename)s'),\n                            modelObject=modelXbrl.modelDocument, filename=modelXbrl.modelDocument.basename,\n                            messageCodes=(\"EFM.6.03.03\", \"EFM.6.23.01\", \"GFM.1.01.01\"))\n            else:\n                modelXbrl.error((self.EFM60303, \"GFM.1.01.01\"),\n                    _('Invalid instance document name, must match \"{base}-{yyyymmdd}.xml\": %(filename)s'),\n                    modelObject=modelXbrl.modelDocument, filename=modelXbrl.modelDocument.basename,\n                    messageCodes=(\"EFM.6.03.03\", \"EFM.6.23.01\", \"GFM.1.01.01\"))\n            \n            #6.5.1 scheme, 6.5.2, 6.5.3 identifier\n            entityIdentifierValue = None\n            entityIdentifierValueElt = None\n            if disclosureSystem.identifierValueName:   # omit if no checks\n                for entityIdentifierElt in xbrlInstDoc.iterdescendants(\"{http://www.xbrl.org/2003/instance}identifier\"):\n                    if isinstance(entityIdentifierElt,ModelObject):\n                        schemeAttr = entityIdentifierElt.get(\"scheme\")\n                        entityIdentifier = XmlUtil.text(entityIdentifierElt)\n                        if not disclosureSystem.identifierSchemePattern.match(schemeAttr):\n                            try:\n                                contextId = entityIdentifierElt.getparent().getparent().id\n                            except AttributeError:\n                                contextId = \"not available\"\n                            modelXbrl.error((\"EFM.6.05.01\", \"GFM.1.02.01\"),\n                                _(\"Invalid entity identifier scheme %(scheme)s in context %(context)s for identifier %(identifier)s\"),\n                                modelObject=entityIdentifierElt, scheme=schemeAttr,\n                                context=contextId, identifier=entityIdentifier)\n                        if not disclosureSystem.identifierValuePattern.match(entityIdentifier):\n                            modelXbrl.error((\"EFM.6.05.02\", \"GFM.1.02.02\"),\n                                _(\"Invalid entity identifier %(entityIdentifierName)s: %(entityIdentifer)s\"),\n                                modelObject=entityIdentifierElt,  \n                                entityIdentifierName=disclosureSystem.identifierValueName,\n                                entityIdentifer=entityIdentifier)\n                        if not entityIdentifierValue:\n                            entityIdentifierValue = entityIdentifier\n                            entityIdentifierValueElt = entityIdentifierElt\n                            if self.validateEFM and not efmCIKpattern.match(entityIdentifierValue):\n                                self.modelXbrl.error(\"EFM.6.05.23.cikValue\",\n                                    _(\"EntityIdentifier %(entityIdentifer)s must be 10 digits.\"),\n                                    modelObject=entityIdentifierElt, entityIdentifer=entityIdentifierValue)\n                        elif entityIdentifier != entityIdentifierValue:\n                            modelXbrl.error((\"EFM.6.05.03\", \"GFM.1.02.03\"),\n                                _(\"Multiple %(entityIdentifierName)ss: %(entityIdentifer)s, %(entityIdentifer2)s\"),\n                                modelObject=(entityIdentifierElt, entityIdentifierValueElt),  \n                                entityIdentifierName=disclosureSystem.identifierValueName,\n                                entityIdentifer=entityIdentifierValue,\n                                entityIdentifer2=entityIdentifier,\n                                filerIdentifier=\",\".join(paramFilerIdentifiers or [])) \n                self.modelXbrl.profileActivity(\"... filer identifier checks\", minTimeToShow=1.0)\n    \n            #6.5.7 duplicated contexts\n            contexts = modelXbrl.contexts.values()\n            contextIDs = set()\n            uniqueContextHashes = {}\n            contextsWithDisallowedOCEs = []\n            contextsWithDisallowedOCEcontent = []\n            for context in contexts:\n                contextID = context.id\n                contextIDs.add(contextID)\n                h = context.contextDimAwareHash\n                if h in uniqueContextHashes:\n                    if context.isEqualTo(uniqueContextHashes[h]):\n                        modelXbrl.error((\"EFM.6.05.07\", \"GFM.1.02.07\"),\n                            _(\"Context ID %(context)s is equivalent to context ID %(context2)s\"),\n                            modelObject=(context, uniqueContextHashes[h]), context=contextID, context2=uniqueContextHashes[h].id)\n                else:\n                    uniqueContextHashes[h] = context\n                    \n                #GFM no time in contexts\n                if self.validateGFM:\n                    for dateElt in XmlUtil.children(context, XbrlConst.xbrli, (\"startDate\", \"endDate\", \"instant\")):\n                        dateText = XmlUtil.text(dateElt)\n                        if not GFMcontextDatePattern.match(dateText):\n                            modelXbrl.error(\"GFM.1.02.25\",\n                                _(\"Context id %(context)s %(elementName)s invalid content %(value)s\"),\n                                modelObject=dateElt, context=contextID, \n                                elementName=dateElt.prefixedName, value=dateText)\n                #6.5.4 scenario\n                hasSegment = XmlUtil.hasChild(context, XbrlConst.xbrli, \"segment\")\n                hasScenario = XmlUtil.hasChild(context, XbrlConst.xbrli, \"scenario\")\n                notAllowed = None\n                if disclosureSystem.contextElement == \"segment\" and hasScenario:\n                    notAllowed = _(\"Scenario\")\n                elif disclosureSystem.contextElement == \"scenario\" and hasSegment:\n                    notAllowed = _(\"Segment\")\n                elif disclosureSystem.contextElement == \"either\" and hasSegment and hasScenario:\n                    notAllowed = _(\"Both segment and scenario\")\n                elif disclosureSystem.contextElement == \"none\" and (hasSegment or hasScenario):\n                    notAllowed = _(\"Neither segment nor scenario\")\n                if notAllowed:\n                    if validateEFMpragmatic:\n                        contextsWithDisallowedOCEs.append(context)\n                    else:\n                        modelXbrl.error((\"EFM.6.05.04\", \"GFM.1.02.04\", \"SBR.NL.2.3.5.06\"),\n                            _(\"%(elementName)s element not allowed in context Id: %(context)s\"),\n                            modelObject=context, elementName=notAllowed, context=contextID, count=1)\n        \n                #6.5.5 segment only explicit dimensions\n                for contextName in {\"segment\": (\"{http://www.xbrl.org/2003/instance}segment\",),\n                                    \"scenario\": (\"{http://www.xbrl.org/2003/instance}scenario\",),\n                                    \"either\": (\"{http://www.xbrl.org/2003/instance}segment\",\"{http://www.xbrl.org/2003/instance}scenario\"),\n                                    \"both\": (\"{http://www.xbrl.org/2003/instance}segment\",\"{http://www.xbrl.org/2003/instance}scenario\"),\n                                    \"none\": [], None:[]\n                                    }[disclosureSystem.contextElement]:\n                    for segScenElt in context.iterdescendants(contextName):\n                        if isinstance(segScenElt,ModelObject):\n                            childTags = \", \".join([child.prefixedName for child in segScenElt.iterchildren()\n                                                   if isinstance(child,ModelObject) and \n                                                   child.tag != \"{http://xbrl.org/2006/xbrldi}explicitMember\"])\n                            if len(childTags) > 0:\n                                if validateEFMpragmatic:\n                                    contextsWithDisallowedOCEcontent.append(context)\n                                else:\n                                    modelXbrl.error((\"EFM.6.05.05\", \"GFM.1.02.05\"),\n                                                    _(\"%(elementName)s of context Id %(context)s has disallowed content: %(content)s\"),\n                                                    modelObject=context, context=contextID, content=childTags, \n                                                    elementName=contextName.partition(\"}\")[2].title())\n                #6.5.38 period forever\n                if context.isForeverPeriod:\n                    self.modelXbrl.error(\"EFM.6.05.38\",\n                        _(\"Context %(contextID)s has a forever period.\"),\n                        modelObject=context, contextID=contextID)\n            if validateEFMpragmatic: # output combined count message\n                if contextsWithDisallowedOCEs:\n                    modelXbrl.error((\"EFM.6.05.04\", \"GFM.1.02.04\"),\n                        _(\"%(count)s contexts contain disallowed %(elementName)s: %(context)s\"),\n                        modelObject=contextsWithDisallowedOCEs, elementName=notAllowed, \n                        count=len(contextsWithDisallowedOCEs), context=', '.join(c.id for c in contextsWithDisallowedOCEs))\n                if contextsWithDisallowedOCEcontent:\n                    modelXbrl.error((\"EFM.6.05.05\", \"GFM.1.02.05\"),\n                        _(\"%(count)s contexts contain disallowed %(elementName)s content: %(context)s\"),\n                        modelObject=contextsWithDisallowedOCEcontent, elementName=disclosureSystem.contextElement, \n                        count=len(contextsWithDisallowedOCEcontent), context=', '.join(c.id for c in contextsWithDisallowedOCEcontent))\n            del uniqueContextHashes, contextsWithDisallowedOCEs, contextsWithDisallowedOCEcontent\n            self.modelXbrl.profileActivity(\"... filer context checks\", minTimeToShow=1.0)\n    \n    \n            #fact items from standard context (no dimension)\n            amendmentDescription = None\n            amendmentDescriptionFact = None\n            amendmentFlag = None\n            amendmentFlagFact = None\n            documentPeriodEndDate = None\n            documentPeriodEndDateFact = None\n            documentType = None\n            documentTypeFact = None\n            deiItems = {}\n            deiFacts = {}\n            commonSharesItemsByStockClass = defaultdict(list)\n            commonSharesClassMembers = None\n            hasDefinedStockAxis = False\n            hasCommonSharesOutstandingDimensionedFactWithDefaultStockClass = False\n            commonSharesClassUndefinedMembers = None\n            commonStockMeasurementDatetime = None\n    \n            deiCheckLocalNames = {\n                \"EntityRegistrantName\", \n                \"EntityCommonStockSharesOutstanding\",\n                \"EntityCurrentReportingStatus\", \n                \"EntityVoluntaryFilers\", \n                disclosureSystem.deiCurrentFiscalYearEndDateElement, \n                \"EntityFilerCategory\", \n                \"EntityWellKnownSeasonedIssuer\", \n                \"EntityPublicFloat\", \n                disclosureSystem.deiDocumentFiscalYearFocusElement, \n                \"DocumentFiscalPeriodFocus\",\n                \"EntityReportingCurrencyISOCode\", # for SD \n                 }\n            #6.5.8 unused contexts\n            for f in modelXbrl.facts:\n                factContextID = f.contextID\n                contextIDs.discard(factContextID)\n                    \n                context = f.context\n                factInDeiNamespace = None\n                factQname = f.qname # works for both inline and plain instances\n                if factQname: # may be none in error situations\n                    factElementName = factQname.localName\n                    if disclosureSystem.deiNamespacePattern is not None:\n                        factInDeiNamespace = disclosureSystem.deiNamespacePattern.match(factQname.namespaceURI)\n                # standard dei items from required context\n                if context is not None: # tests do not apply to tuples\n                    if not context.hasSegment and not context.hasScenario: \n                        #default context\n                        if factInDeiNamespace:\n                            value = f.value\n                            if factElementName == disclosureSystem.deiAmendmentFlagElement:\n                                amendmentFlag = value\n                                amendmentFlagFact = f\n                            elif factElementName == \"AmendmentDescription\":\n                                amendmentDescription = value\n                                amendmentDescriptionFact = f\n                            elif factElementName == disclosureSystem.deiDocumentPeriodEndDateElement:\n                                documentPeriodEndDate = value\n                                documentPeriodEndDateFact = f\n                                commonStockMeasurementDatetime = context.endDatetime\n                            elif factElementName == \"DocumentType\":\n                                documentType = value\n                                documentTypeFact = f\n                            elif factElementName == disclosureSystem.deiFilerIdentifierElement:\n                                deiItems[factElementName] = value\n                                deiFilerIdentifierFact = f\n                            elif factElementName == disclosureSystem.deiFilerNameElement:\n                                deiItems[factElementName] = value\n                                deiFilerNameFact = f\n                            elif factElementName in deiCheckLocalNames:\n                                deiItems[factElementName] = value\n                                deiFacts[factElementName] = f\n                                if (self.requiredContext is None and context.isStartEndPeriod and\n                                    context.startDatetime is not None and context.endDatetime is not None):\n                                    self.requiredContext = context\n                    else:\n                        # segment present\n                        isEntityCommonStockSharesOutstanding = factElementName == \"EntityCommonStockSharesOutstanding\"\n                        hasClassOfStockMember = False\n                        \n                        # note all concepts used in explicit dimensions\n                        for dimValue in context.qnameDims.values():\n                            if dimValue.isExplicit:\n                                dimConcept = dimValue.dimension\n                                memConcept = dimValue.member\n                                for dConcept in (dimConcept, memConcept):\n                                    if dConcept is not None:\n                                        conceptsUsed[dConcept] = False\n                                if (isEntityCommonStockSharesOutstanding and\n                                    dimConcept is not None and\n                                    dimConcept.name == \"StatementClassOfStockAxis\"):\n                                    commonSharesItemsByStockClass[memConcept.qname].append(f)\n                                    ''' per discussion with Dean R, remove use of LB defined members from this test\n                                    if commonSharesClassMembers is None:\n                                        commonSharesClassMembers, hasDefinedStockAxis = self.getDimMembers(dimConcept)\n                                    if not hasDefinedStockAxis: # no def LB for stock axis, note observed members\n                                        commonSharesClassMembers.add(memConcept.qname) \n                                    #following is replacement:'''\n                                    if commonSharesClassMembers is None:\n                                        commonSharesClassMembers = set()\n                                    commonSharesClassMembers.add(memConcept.qname) # only note the actually used members, not any defined members\n                                    #end of replacement \n                                    hasClassOfStockMember = True\n                                    \n                        if isEntityCommonStockSharesOutstanding and not hasClassOfStockMember:\n                            hasCommonSharesOutstandingDimensionedFactWithDefaultStockClass = True   # absent dimension, may be no def LB\n\n                    if self.validateEFM: # note that this is in the \"if context is not None\" region\n                        for pluginXbrlMethod in pluginClassMethods(\"Validate.EFM.Fact\"):\n                            pluginXbrlMethod(self, f)\n                #6.5.17 facts with precision\n                concept = f.concept\n                if concept is None:\n                    modelXbrl.error((\"EFM.6.04.03\", \"GFM.2.01.01\"),\n                        _(\"Fact %(fact)s of context %(contextID)s has an XBRL error\"),\n                        modelObject=f, fact=f.qname, contextID=factContextID)\n                else:\n                    # note fact concpts used\n                    conceptsUsed[concept] = False\n                    \n                    if concept.isNumeric:\n                        if f.precision:\n                            modelXbrl.error((\"EFM.6.05.17\", \"GFM.1.02.16\"),\n                                _(\"Numeric fact %(fact)s of context %(contextID)s has a precision attribute '%(precision)s'\"),\n                                modelObject=f, fact=f.qname, contextID=factContextID, precision=f.precision)\n\n                    #6.5.25 domain items as facts\n                    if self.validateEFM and concept.type is not None and concept.type.isDomainItemType:\n                        modelXbrl.error(\"EFM.6.05.25\",\n                            _(\"Domain item %(fact)s in context %(contextID)s may not appear as a fact\"),\n                            modelObject=f, fact=f.qname, contextID=factContextID)\n                    \n                if validateInlineXbrlGFM:\n                    if f.localName == \"nonFraction\" or f.localName == \"fraction\":\n                        syms = signOrCurrencyPattern.findall(f.text)\n                        if syms:\n                            modelXbrl.error((\"EFM.N/A\", \"GFM.1.10.18\"),\n                                'ix-numeric Fact %(fact)s of context %(contextID)s has a sign or currency symbol \"%(value)s\" in \"%(text)s\"',\n                                modelObject=f, fact=f.qname, contextID=factContextID, \n                                value=\"\".join(s for t in syms for s in t), text=f.text)\n                            \n            self.entityRegistrantName = deiItems.get(\"EntityRegistrantName\") # used for name check in 6.8.6\n                            \n            # 6.05.23,24 check (after dei facts read)\n            if not (entityIdentifierValue == \"0000000000\" and self.validateEFM and documentType == \"L SDR\"):\n                if disclosureSystem.deiFilerIdentifierElement in deiItems:\n                    value = deiItems[disclosureSystem.deiFilerIdentifierElement]\n                    if entityIdentifierValue != value:\n                        self.modelXbrl.error((\"EFM.6.05.23\", \"GFM.3.02.02\"),\n                            _(\"dei:%(elementName)s %(value)s must match the context entity identifier %(entityIdentifier)s\"),\n                            modelObject=deiFilerIdentifierFact, elementName=disclosureSystem.deiFilerIdentifierElement,\n                            value=value, entityIdentifier=entityIdentifierValue)\n                    if paramFilerIdentifiers:\n                        if value not in paramFilerIdentifiers:\n                            self.modelXbrl.error((\"EFM.6.05.23.submissionIdentifier\", \"GFM.3.02.02\"),\n                                _(\"dei:%(elementName)s %(value)s must match submission: %(filerIdentifier)s\"),\n                                modelObject=deiFilerIdentifierFact, elementName=disclosureSystem.deiFilerIdentifierElement,\n                                value=value, filerIdentifier=\",\".join(paramFilerIdentifiers))\n                    elif paramFilerIdentifier and value != paramFilerIdentifier:\n                        self.modelXbrl.error((\"EFM.6.05.23.submissionIdentifier\", \"GFM.3.02.02\"),\n                            _(\"dei:%(elementName)s %(value)s must match submission: %(filerIdentifier)s\"),\n                            modelObject=deiFilerIdentifierFact, elementName=disclosureSystem.deiFilerIdentifierElement,\n                            value=value, filerIdentifier=paramFilerIdentifier)\n                if disclosureSystem.deiFilerNameElement in deiItems:\n                    value = deiItems[disclosureSystem.deiFilerNameElement]\n                    if paramFilerIdentifiers and paramFilerNames and entityIdentifierValue in paramFilerIdentifiers:\n                        prefix = paramFilerNames[paramFilerIdentifiers.index(entityIdentifierValue)]\n                        if not value.lower().startswith(prefix.lower()):\n                            self.modelXbrl.error((\"EFM.6.05.24\", \"GFM.3.02.02\"),\n                                _(\"dei:%(elementName)s %(prefix)s should be a case-insensitive prefix of: %(value)s\"),\n                                modelObject=deiFilerNameFact, elementName=disclosureSystem.deiFilerNameElement,\n                                prefix=prefix, value=value)\n    \n            self.modelXbrl.profileActivity(\"... filer fact checks\", minTimeToShow=1.0)\n    \n            if len(contextIDs) > 0: # check if contextID is on any undefined facts\n                for undefinedFact in modelXbrl.undefinedFacts:\n                    contextIDs.discard(undefinedFact.get(\"contextRef\"))\n                if len(contextIDs) > 0:\n                    modelXbrl.error((\"EFM.6.05.08\", \"GFM.1.02.08\"),\n                                    _(\"The instance document contained a context(s) %(contextIDs)s that was(are) not used in any fact.\"),\n                                    modelXbrl=modelXbrl, contextIDs=\", \".join(str(c) for c in contextIDs))\n    \n            #6.5.9, .10 start-end durations\n            if disclosureSystem.GFM or \\\n               disclosureSystemVersion[0] >= 27 or \\\n               documentType in {\n                        '20-F', '40-F', '10-Q', '10-QT', '10-K', '10-KT', '10', 'N-CSR', 'N-CSRS', 'N-Q',\n                        '20-F/A', '40-F/A', '10-Q/A', '10-QT/A', '10-K/A', '10-KT/A', '10/A', 'N-CSR/A', 'N-CSRS/A', 'N-Q/A'}:\n                '''\n                for c1 in contexts:\n                    if c1.isStartEndPeriod:\n                        end1 = c1.endDatetime\n                        start1 = c1.startDatetime\n                        for c2 in contexts:\n                            if c1 != c2 and c2.isStartEndPeriod:\n                                duration = end1 - c2.startDatetime\n                                if duration > datetime.timedelta(0) and duration <= datetime.timedelta(1):\n                                    modelXbrl.error((\"EFM.6.05.09\", \"GFM.1.2.9\"),\n                                        _(\"Context {0} endDate and {1} startDate have a duration of one day; that is inconsistent with document type {2}.\"),\n                                             c1.id, c2.id, documentType), \n                                        \"err\", )\n                            if self.validateEFM and c1 != c2 and c2.isInstantPeriod:\n                                duration = c2.endDatetime - start1\n                                if duration > datetime.timedelta(0) and duration <= datetime.timedelta(1):\n                                    modelXbrl.error(\n                                        _(\"Context {0} startDate and {1} end (instant) have a duration of one day; that is inconsistent with document type {2}.\"),\n                                             c1.id, c2.id, documentType), \n                                        \"err\", \"EFM.6.05.10\")\n                '''\n                durationCntxStartDatetimes = defaultdict(set)\n                for cntx in contexts:\n                    if cntx.isStartEndPeriod and cntx.startDatetime is not None:\n                        durationCntxStartDatetimes[cntx.startDatetime].add(cntx)\n                probStartEndCntxsByEnd = defaultdict(set)\n                startEndCntxsByEnd = defaultdict(set)\n                probInstantCntxsByEnd = defaultdict(set)\n                probCntxs = set()\n                for cntx in contexts:\n                    end = cntx.endDatetime\n                    if end is not None:\n                        if cntx.isStartEndPeriod:\n                            thisStart = cntx.startDatetime\n                            for otherStart, otherCntxs in durationCntxStartDatetimes.items():\n                                duration = end - otherStart\n                                if duration > datetime.timedelta(0) and duration <= datetime.timedelta(1):\n                                    if disclosureSystemVersion[0] < 27:\n                                        probCntxs |= otherCntxs - {cntx}\n                                    elif thisStart is not None and end - thisStart > datetime.timedelta(1):\n                                        for otherCntx in otherCntxs:\n                                            if otherCntx is not cntx and otherCntx.endDatetime != end and otherStart != cntx.startDatetime:\n                                                probCntxs.add(otherCntx)\n                            if probCntxs:\n                                probStartEndCntxsByEnd[end] |= probCntxs\n                                startEndCntxsByEnd[end] |= {cntx}\n                                probCntxs.clear()\n                        if self.validateEFM and cntx.isInstantPeriod:\n                            for otherStart, otherCntxs in durationCntxStartDatetimes.items():\n                                duration = end - otherStart\n                                if duration > datetime.timedelta(0) and duration <= datetime.timedelta(1):\n                                    probCntxs |= otherCntxs\n                            if probCntxs:\n                                probInstantCntxsByEnd[end] |= ( probCntxs | {cntx} )\n                                probCntxs.clear()\n                del probCntxs\n                for end, probCntxs in probStartEndCntxsByEnd.items():\n                    endCntxs = startEndCntxsByEnd[end]\n                    modelXbrl.error((\"EFM.6.05.09\", \"GFM.1.2.9\"),\n                        _(\"Context endDate %(endDate)s, and startDate(s) have a duration of one day, for end context(s): %(endContexts)s and start context(s): %(startContexts)s; that is inconsistent with document type %(documentType)s.\"),\n                        modelObject=probCntxs, endDate=XmlUtil.dateunionValue(end, subtractOneDay=True), \n                        endContexts=', '.join(sorted(c.id for c in endCntxs)),\n                        startContexts=', '.join(sorted(c.id for c in probCntxs)), \n                        documentType=documentType)\n                if disclosureSystemVersion[0] < 27:\n                    for end, probCntxs in probInstantCntxsByEnd.items():\n                        modelXbrl.error(\"EFM.6.05.10\",\n                            _(\"Context instant date %(endDate)s startDate has a duration of one day,with end (instant) of context(s): %(contexts)s; that is inconsistent with document type %(documentType)s.\"),\n                            modelObject=probCntxs, endDate=XmlUtil.dateunionValue(end, subtractOneDay=True), \n                            contexts=', '.join(sorted(c.id for c in probCntxs)), \n                            documentType=documentType)\n                del probStartEndCntxsByEnd, startEndCntxsByEnd, probInstantCntxsByEnd\n                del durationCntxStartDatetimes\n                self.modelXbrl.profileActivity(\"... filer instant-duration checks\", minTimeToShow=1.0)\n                \n            #6.5.19 required context\n            foundRequiredContext = False\n            for c in contexts:\n                if c.isStartEndPeriod:\n                    if not c.hasSegment:\n                        foundRequiredContext = True\n                        break\n            if not foundRequiredContext:\n                modelXbrl.error((\"EFM.6.05.19\", \"GFM.1.02.18\"),\n                    _(\"Required context (no segment) not found for document type %(documentType)s.\"),\n                    modelObject=documentTypeFact, documentType=documentType)\n                \n            #6.5.11 equivalent units\n            uniqueUnitHashes = {}\n            for unit in self.modelXbrl.units.values():\n                h = unit.hash\n                if h in uniqueUnitHashes:\n                    if unit.isEqualTo(uniqueUnitHashes[h]):\n                        modelXbrl.error((\"EFM.6.05.11\", \"GFM.1.02.10\"),\n                            _(\"Units %(unitID)s and %(unitID2)s are equivalent.\"),\n                            modelObject=(unit, uniqueUnitHashes[h]), unitID=unit.id, unitID2=uniqueUnitHashes[h].id)\n                else:\n                    uniqueUnitHashes[h] = unit\n                if self.validateEFM:  # 6.5.38\n                    for measureElt in unit.iterdescendants(tag=\"{http://www.xbrl.org/2003/instance}measure\"):\n                        if isinstance(measureElt.xValue, ModelValue.QName) and len(measureElt.xValue.localName) > 65:\n                            l = len(measureElt.xValue.localName.encode(\"utf-8\"))\n                            if l > 200:\n                                modelXbrl.error(\"EFM.6.05.36\",\n                                    _(\"Unit has a measure  with localName length (%(length)s) over 200 bytes long in utf-8, %(measure)s.\"),\n                                    modelObject=measureElt, unitID=unit.id, measure=measureElt.xValue.localName, length=l)\n            del uniqueUnitHashes\n            self.modelXbrl.profileActivity(\"... filer unit checks\", minTimeToShow=1.0)\n   \n    \n            # EFM.6.05.14, GFM.1.02.13 xml:lang tests, as of v-17, full default lang is compared\n            #if self.validateEFM:\n            #    factLangStartsWith = disclosureSystem.defaultXmlLang[:2]\n            #else:\n            #    factLangStartsWith = disclosureSystem.defaultXmlLang\n            requiredFactLang = disclosureSystem.defaultXmlLang\n\n            #6.5.12 equivalent facts\n            factsForLang = {}\n            factForConceptContextUnitLangHash = {}\n            keysNotDefaultLang = {}\n            iF1 = 1\n            for f1 in modelXbrl.facts:\n                # build keys table for 6.5.14\n                if not f1.isNil:\n                    langTestKey = \"{0},{1},{2}\".format(f1.qname, f1.contextID, f1.unitID)\n                    factsForLang.setdefault(langTestKey, []).append(f1)\n                    lang = f1.xmlLang\n                    if lang and lang != requiredFactLang: # not lang.startswith(factLangStartsWith):\n                        keysNotDefaultLang[langTestKey] = f1\n                        \n                    # 6.5.37 test (insignificant digits due to rounding)\n                    if f1.isNumeric and f1.decimals and f1.decimals != \"INF\" and not f1.isNil and getattr(f1,\"xValid\", 0) == 4:\n                        try:\n                            insignificance = insignificantDigits(f1.xValue, decimals=f1.decimals)\n                            if insignificance: # if not None, returns (truncatedDigits, insiginficantDigits)\n                                modelXbrl.error((\"EFM.6.05.37\", \"GFM.1.02.26\"),\n                                    _(\"Fact %(fact)s of context %(contextID)s decimals %(decimals)s value %(value)s has nonzero digits in insignificant portion %(insignificantDigits)s.\"),\n                                    modelObject=f1, fact=f1.qname, contextID=f1.contextID, decimals=f1.decimals, \n                                    value=f1.xValue, truncatedDigits=insignificance[0], insignificantDigits=insignificance[1])\n                        except (ValueError,TypeError):\n                            modelXbrl.error((\"EFM.6.05.37\", \"GFM.1.02.26\"),\n                                _(\"Fact %(fact)s of context %(contextID)s decimals %(decimals)s value %(value)s causes Value Error exception.\"),\n                                modelObject=f1, fact=f1.qname, contextID=f1.contextID, decimals=f1.decimals, value=f1.value)\n                # 6.5.12 test\n                h = f1.conceptContextUnitLangHash\n                if h in factForConceptContextUnitLangHash:\n                    f2 = factForConceptContextUnitLangHash[h]\n                    if f1.qname == f2.qname and \\\n                       f1.contextID == f2.contextID and \\\n                       f1.unitID == f2.unitID and \\\n                       f1.xmlLang == f2.xmlLang:\n                        modelXbrl.error((\"EFM.6.05.12\", \"GFM.1.02.11\"),\n                            \"Facts %(fact)s of context %(contextID)s and %(contextID2)s are equivalent.\",\n                            modelObject=(f1, f2), fact=f1.qname, contextID=f1.contextID, contextID2=f2.contextID)\n                else:\n                    factForConceptContextUnitLangHash[h] = f1\n                iF1 += 1\n            del factForConceptContextUnitLangHash\n            self.modelXbrl.profileActivity(\"... filer fact checks\", minTimeToShow=1.0)\n    \n            #6.5.14 facts without english text\n            for keyNotDefaultLang, factNotDefaultLang in keysNotDefaultLang.items():\n                anyDefaultLangFact = False\n                for fact in factsForLang[keyNotDefaultLang]:\n                    if fact.xmlLang == requiredFactLang: #.startswith(factLangStartsWith):\n                        anyDefaultLangFact = True\n                        break\n                if not anyDefaultLangFact:\n                    self.modelXbrl.error((\"EFM.6.05.14\", \"GFM.1.02.13\"),\n                        _(\"Fact %(fact)s of context %(contextID)s has text of xml:lang '%(lang)s' without corresponding %(lang2)s text\"),\n                        modelObject=factNotDefaultLang, fact=factNotDefaultLang.qname, contextID=factNotDefaultLang.contextID, \n                        lang=factNotDefaultLang.xmlLang, lang2=requiredFactLang) # factLangStartsWith)\n                    \n            #label validations\n            if not labelsRelationshipSet:\n                self.modelXbrl.error((\"EFM.6.10.01.missingLabelLinkbase\", \"GFM.1.05.01\"),\n                    _(\"A label linkbase is required but was not found\"), \n                    modelXbrl=modelXbrl)\n            elif disclosureSystem.defaultXmlLang:  # cannot check if no defaultXmlLang specified\n                for concept in conceptsUsed.keys():\n                    self.checkConceptLabels(modelXbrl, labelsRelationshipSet, disclosureSystem, concept)\n                        \n    \n            #6.5.15 facts with xml in text blocks\n            if self.validateEFMorGFM:\n                ValidateFilingText.validateTextBlockFacts(modelXbrl)\n            \n                if amendmentFlag is None:\n                    modelXbrl.log(\"WARNING\" if validateEFMpragmatic else \"ERROR\",\n                                  (\"EFM.6.05.20.missingAmendmentFlag\", \"GFM.3.02.01\"),\n                        _(\"%(elementName)s is not found in the default context\"),\n                        modelXbrl=modelXbrl, elementName=disclosureSystem.deiAmendmentFlagElement)\n        \n                if not documentPeriodEndDate:\n                    modelXbrl.error((\"EFM.6.05.20.missingDocumentPeriodEndDate\", \"GFM.3.02.01\"),\n                        _(\"%(elementName)s is required and was not found in the default context\"),\n                        modelXbrl=modelXbrl, elementName=disclosureSystem.deiDocumentPeriodEndDateElement)\n                else:\n                    dateMatch = datePattern.match(documentPeriodEndDate)\n                    if not dateMatch or dateMatch.lastindex != 3:\n                        modelXbrl.error((\"EFM.6.05.20\", \"GFM.3.02.01\"),\n                            _(\"%(elementName)s is in the default context is incorrect '%(date)s'\"),\n                            modelXbrl=modelXbrl, elementName=disclosureSystem.deiDocumentPeriodEndDateElement,\n                            date=documentPeriodEndDate)\n            self.modelXbrl.profileActivity(\"... filer label and text checks\", minTimeToShow=1.0)\n    \n            if self.validateEFM:\n                if amendmentFlag == \"true\" and amendmentDescription is None:\n                    modelXbrl.log(\"WARNING\" if validateEFMpragmatic else \"ERROR\",\n                                  \"EFM.6.05.20.missingAmendmentDescription\",\n                        _(\"AmendmentFlag is true in context %(contextID)s so AmendmentDescription is also required\"),\n                        modelObject=amendmentFlagFact, contextID=amendmentFlagFact.contextID if amendmentFlagFact is not None else \"unknown\")\n        \n                if amendmentDescription is not None and amendmentFlag != \"true\":\n                    modelXbrl.log(\"WARNING\" if validateEFMpragmatic else \"ERROR\",\n                                  \"EFM.6.05.20.extraneous\",\n                        _(\"AmendmentDescription can not be provided when AmendmentFlag is not true in context %(contextID)s\"),\n                        modelObject=amendmentDescriptionFact, contextID=amendmentDescriptionFact.contextID)\n                    \n                if documentType is None:\n                    modelXbrl.error(\"EFM.6.05.20.missingDocumentType\",\n                        _(\"DocumentType is required and was not found in the default context\"), \n                        modelXbrl=modelXbrl)\n                elif documentType not in {\n                                            \"497\",\n                                            \"10-12B\",\n                                            \"10-12B/A\",\n                                            \"10-12G\",\n                                            \"10-12G/A\",\n                                            \"10-K/A\",\n                                            \"10-KT\",\n                                            \"10-K\",\n                                            \"10-KT/A\",\n                                            \"10-Q/A\",\n                                            \"10-QT\",\n                                            \"10-Q\",\n                                            \"10-QT/A\",\n                                            \"20-F\",\n                                            \"20-F/A\",\n                                            \"20FR12B\",\n                                            \"20FR12B/A\",\n                                            \"20FR12G\",\n                                            \"20FR12G/A\",\n                                            \"40-F\",\n                                            \"40-F/A\",\n                                            \"40FR12B\",\n                                            \"40FR12B/A\",\n                                            \"40FR12G\",\n                                            \"40FR12G/A\",\n                                            \"485BPOS\",\n                                            \"6-K\",\n                                            \"6-K/A\",\n                                            \"8-K\",\n                                            \"8-K/A\",\n                                            \"8-K12B\",\n                                            \"8-K12B/A\",\n                                            \"8-K12G3\",\n                                            \"8-K12G3/A\",\n                                            \"8-K15D5\",\n                                            \"8-K15D5/A\",\n                                            \"F-1/A\",\n                                            \"F-10\",\n                                            \"F-10/A\",\n                                            \"F-10EF\",\n                                            \"F-10POS\",\n                                            \"F-3/A\",\n                                            \"F-3ASR\",\n                                            \"F-3D\",\n                                            \"F-3DPOS\",\n                                            \"F-4 POS\",\n                                            \"F-4/A\",\n                                            \"F-4EF\",\n                                            \"F-9 POS\",\n                                            \"F-9/A\",\n                                            \"F-9\",\n                                            \"F-9EF\",\n                                            \"N-1A\",\n                                            \"N-1A/A\",\n                                            \"N-CSR\",\n                                            \"N-CSR/A\",\n                                            \"N-CSRS\",\n                                            \"N-CSRS/A\",\n                                            \"N-Q\",\n                                            \"N-Q/A\",\n                                            \"F-1\",\n                                            \"F-6\",\n                                            \"POS AM\",\n                                            \"SD\",\n                                            \"SD/A\",\n                                            \"S-20\",\n                                            \"S-B\",\n                                            \"F-4\",\n                                            \"POS EX\",\n                                            \"F-1MEF\",\n                                            \"F-3MEF\",\n                                            \"F-4MEF\",\n                                            \"K SDR\",\n                                            \"L SDR\",\n                                            \"POS462B\",\n                                            \"POS462C\",\n                                            \"S-BMEF\",\n                                            \"F-3\",\n                                            \"Other\",\n                                            \"POSASR\",\n                                            \"S-1\",\n                                            \"S-1/A\",\n                                            \"S-11\",\n                                            \"S-11/A\",\n                                            \"S-11MEF\",\n                                            \"S-1MEF\",\n                                            \"S-3/A\",\n                                            \"S-3ASR\",\n                                            \"S-3D\",\n                                            \"S-3\",\n                                            \"S-3DPOS\",\n                                            \"S-3MEF\",\n                                            \"S-4 POS\",\n                                            \"S-4/A\",\n                                            \"S-4\",\n                                            \"S-4EF\",\n                                            \"S-4MEF\",\n                                            \"SD\",\n                                            \"SD/A\",\n                                            \"SP 15D2\",\n                                            \"SP 15D2/A\"\n                                          }:\n                    modelXbrl.error(\"EFM.6.05.20.documentTypeValue\",\n                        _(\"DocumentType '%(documentType)s' of context %(contextID)s was not recognized\"),\n                        modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType)\n                elif submissionType:\n                    expectedDocumentTypes = { \n                                            \"10-12B\": (\"10-12B\", \"Other\"),\n                                            \"10-12B/A\": (\"10-12B/A\", \"Other\"),\n                                            \"10-12G\": (\"10-12G\", \"Other\"),\n                                            \"10-12G/A\": (\"10-12G/A\", \"Other\"),\n                                            \"10-K\": (\"10-K\",),\n                                            \"10-K/A\": (\"10-K\", \"10-K/A\"),\n                                            \"10-KT\": (\"10-K\",\"10-KT\",\"Other\"),\n                                            \"10-KT/A\": (\"10-K\", \"10-KT\", \"10-KT/A\", \"Other\"),\n                                            \"10-Q\": (\"10-Q\",),\n                                            \"10-Q/A\": (\"10-Q\", \"10-Q/A\"),\n                                            \"10-QT\": (\"10-Q\", \"10-QT\", \"Other\"),\n                                            \"10-QT/A\": (\"10-Q\", \"10-QT\", \"10-QT/A\", \"Other\"),\n                                            \"20-F\": (\"20-F\",),\n                                            \"20-F/A\": (\"20-F\", \"20-F/A\"),\n                                            \"20FR12B\": (\"20FR12B\", \"Other\"),\n                                            \"20FR12B/A\": (\"20FR12B/A\", \"Other\"),\n                                            \"20FR12G\": (\"20FR12G\", \"Other\"),\n                                            \"20FR12G/A\": (\"20FR12G/A\", \"Other\"),\n                                            \"40-F\": (\"40-F\",),\n                                            \"40-F/A\": (\"40-F\", \"40-F/A\"),\n                                            \"40FR12B\": (\"40FR12B\", \"Other\"),\n                                            \"40FR12B/A\": (\"40FR12B/A\", \"Other\"),\n                                            \"40FR12G\": (\"40FR12G\", \"Other\"),\n                                            \"40FR12G/A\": (\"40FR12G/A\", \"Other\"),\n                                            \"485BPOS\": (\"485BPOS\",),\n                                            \"497\": (\"497\", \"Other\"),\n                                            \"6-K\": (\"6-K\",),\n                                            \"6-K/A\": (\"6-K\", \"6-K/A\"),\n                                            \"8-K\": (\"8-K\",),\n                                            \"8-K/A\": (\"8-K\", \"8-K/A\"),\n                                            \"8-K12B\": (\"8-K12B\", \"Other\"),\n                                            \"8-K12B/A\": (\"8-K12B/A\", \"Other\"),\n                                            \"8-K12G3\": (\"8-K12G3\", \"Other\"),\n                                            \"8-K12G3/A\": (\"8-K12G3/A\", \"Other\"),\n                                            \"8-K15D5\": (\"8-K15D5\", \"Other\"),\n                                            \"8-K15D5/A\": (\"8-K15D5/A\", \"Other\"),\n                                            \"F-1\": (\"F-1\",),\n                                            \"F-1/A\": (\"F-1\", \"F-1/A\"),\n                                            \"F-10\": (\"F-10\",),\n                                            \"F-10/A\": (\"F-10\", \"F-10/A\"),\n                                            \"F-10EF\": (\"F-10EF\", \"Other\"),\n                                            \"F-10POS\": (\"F-10POS\", \"Other\"),\n                                            \"F-1MEF\": (\"F-1MEF\",),\n                                            \"F-3\": (\"F-3\",),\n                                            \"F-3/A\": (\"F-3\", \"F-3/A\"),\n                                            \"F-3ASR\": (\"F-3\", \"F-3ASR\"),\n                                            \"F-3D\": (\"F-3\", \"F-3D\"),\n                                            \"F-3DPOS\": (\"F-3\", \"F-3DPOS\"),\n                                            \"F-3MEF\": (\"F-3MEF\",),\n                                            \"F-4\": (\"F-4\",),\n                                            \"F-4 POS\": (\"F-4\", \"F-4 POS\"),\n                                            \"F-4/A\": (\"F-4\", \"F-4/A\"),\n                                            \"F-4EF\": (\"F-4\", \"F-4EF\"),\n                                            \"F-4MEF\": (\"F-4MEF\",),\n                                            \"F-9\": (\"F-9\",),\n                                            \"F-9 POS\": (\"F-9\", \"F-9 POS\"),\n                                            \"F-9/A\": (\"F-9\", \"F-9/A\"),\n                                            \"F-9EF\": (\"F-9\", \"F-9EF\"),\n                                            \"N-1A\": (\"N-1A\",),\n                                            \"N-1A/A\": (\"N-1A/A\", \"Other\"),\n                                            \"N-CSR\": (\"N-CSR\",),\n                                            \"N-CSR/A\": (\"N-CSR/A\",),\n                                            \"N-CSRS\": (\"N-CSRS\",),\n                                            \"N-CSRS/A\": (\"N-CSRS/A\",),\n                                            \"N-Q\": (\"N-Q\",),\n                                            \"N-Q/A\": (\"N-Q/A\",),\n                                            \"POS AM\": (\"F-1\", \"F-3\", \"F-4\", \"F-6\", \"Other\", \n                                                       \"POS AM\", \"S-1\", \"S-11\", \"S-20\", \"S-3\", \"S-4\", \"S-B\"),\n                                            \"POS EX\": (\"F-3\", \"F-4\", \"Other\", \n                                                       \"POS EX\", \"S-1\", \"S-3\", \"S-4\"),\n                                            \"POS462B\": (\"F-1MEF\", \"F-3MEF\", \"F-4MEF\", \"Other\", \n                                                        \"POS462B\", \"POS462C\", \"S-11MEF\", \"S-1MEF\", \"S-3MEF\", \"S-BMEF\"),\n                                            \"POSASR\": (\"F-3\", \"Other\", \"POSASR\", \"S-3\"),\n                                            \"S-1\": (\"S-1\",),\n                                            \"S-1/A\": (\"S-1\", \"S-1/A\"),\n                                            \"S-11\": (\"S-11\",),\n                                            \"S-11/A\": (\"S-11/A\",),\n                                            \"S-11MEF\": (\"S-11MEF\",),\n                                            \"S-1MEF\": (\"S-1MEF\",),\n                                            \"S-3\": (\"S-3\",),\n                                            \"S-3/A\": (\"S-3\", \"S-3/A\"),\n                                            \"S-3ASR\": (\"S-3\", \"S-3ASR\"),\n                                            \"S-3D\": (\"S-3\", \"S-3D\"),\n                                            \"S-3DPOS\": (\"S-3\", \"S-3DPOS\"),\n                                            \"S-3MEF\": (\"S-3MEF\",),\n                                            \"S-4\": (\"S-4\",),\n                                            \"S-4 POS\": (\"S-4\", \"S-4 POS\"),\n                                            \"S-4/A\": (\"S-4\", \"S-4/A\"),\n                                            \"S-4EF\": (\"S-4\", \"S-4EF\"),\n                                            \"S-4MEF\": (\"S-4MEF\",),\n                                            \"SD\": (\"SD\",),\n                                            \"SD/A\": (\"SD/A\",),\n                                            \"SP 15D2\": (\"SP 15D2\",),\n                                            \"SP 15D2/A\": (\"SP 15D2/A\",),\n                                            \"SDR\": (\"K SDR\", \"L SDR\"),\n                                            \"SDR/A\": (\"K SDR\", \"L SDR\"),\n                                            \"SDR-A\": (\"K SDR\", \"L SDR\"),\n                                            \"SDR/W \": (\"K SDR\", \"L SDR\")\n                            }.get(submissionType)\n                    if expectedDocumentTypes and documentType not in expectedDocumentTypes:\n                        modelXbrl.error(\"EFM.6.05.20.submissionDocumentType\" if self.exhibitType != \"EX-2.01\" else \"EFM.6.23.03\",\n                            _(\"DocumentType '%(documentType)s' of context %(contextID)s inapplicable to submission form %(submissionType)s\"),\n                            modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType, submissionType=submissionType,\n                            messageCodes=(\"EFM.6.05.20.submissionDocumentType\", \"EFM.6.23.03\"))\n                if self.exhibitType and documentType is not None:\n                    if (documentType in (\"SD\", \"SD/A\")) != (self.exhibitType == \"EX-2.01\"):\n                        modelXbrl.error({\"EX-100\":\"EFM.6.23.04\",\n                                         \"EX-101\":\"EFM.6.23.04\",\n                                         \"EX-99.K SDR.INS\":\"EFM.6.23.04\",\n                                         \"EX-99.L SDR.INS\":\"EFM.6.23.04\",\n                                         \"EX-2.01\":\"EFM.6.23.05\"}.get(self.exhibitType,\"EX-101\"),\n                            _(\"The value for dei:DocumentType, %(documentType)s, is not allowed for %(exhibitType)s attachments.\"),\n                            modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType, exhibitType=self.exhibitType,\n                            messageCodes=(\"EFM.6.23.04\", \"EFM.6.23.04\", \"EFM.6.23.05\"))\n                    elif (((documentType == \"K SDR\") != (val.exhibitType in (\"EX-99.K SDR\", \"EX-99.K SDR.INS\"))) or\n                          ((documentType == \"L SDR\") != (val.exhibitType in (\"EX-99.L SDR\", \"EX-99.L SDR.INS\")))):\n                        modelXbrl.error(\"EFM.6.05.20.exhibitDocumentType\",\n                            _(\"The value for dei:DocumentType, '%(documentType)s' is not allowed for %(exhibitType)s attachments.\"),\n                            modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType, exhibitType=val.exhibitType)\n                    \n                # 6.5.21\n                for doctypesRequired, deiItemsRequired in (\n                      ((\"10-K\", \"10-KT\", \"10-Q\", \"10-QT\", \"20-F\", \"40-F\",\n                        \"10-K/A\", \"10-KT/A\", \"10-Q/A\", \"10-QT/A\", \"20-F/A\", \"40-F/A\",\n                        \"6-K\", \"NCSR\", \"N-CSR\", \"N-CSRS\", \"N-Q\",\n                        \"6-K/A\", \"NCSR/A\", \"N-CSR/A\", \"N-CSRS/A\", \"N-Q/A\",\n                        \"10\", \"S-1\", \"S-3\", \"S-4\", \"S-11\", \"POS AM\",\n                        \"10/A\", \"S-1/A\", \"S-3/A\", \"S-4/A\", \"S-11/A\", \n                        \"8-K\", \"F-1\", \"F-3\", \"F-10\", \"497\", \"485BPOS\",\n                        \"8-K/A\", \"F-1/A\", \"F-3/A\", \"F-10/A\", \"K SDR\", \"L SDR\", \n                        \"Other\"),\n                        (\"EntityRegistrantName\", \"EntityCentralIndexKey\")),\n                      ((\"10-K\", \"10-KT\", \"20-F\", \"40-F\",\n                        \"10-K/A\", \"10-KT/A\", \"20-F/A\", \"40-F/A\"),\n                       (\"EntityCurrentReportingStatus\",)),\n                     ((\"10-K\", \"10-KT\", \"10-K/A\", \"10-KT/A\",),\n                      (\"EntityVoluntaryFilers\", \"EntityPublicFloat\")),\n                      ((\"10-K\", \"10-KT\", \"10-Q\", \"10-QT\", \"20-F\", \"40-F\",\n                        \"10-K/A\", \"10-KT/A\", \"10-Q/A\", \"10-QT/A\", \"20-F/A\", \"40-F/A\",\n                        \"6-K\", \"NCSR\", \"N-CSR\", \"N-CSRS\", \"N-Q\",\n                        \"6-K/A\", \"NCSR/A\", \"N-CSR/A\", \"N-CSRS/A\", \"N-Q/A\", \"K SDR\", \"L SDR\"),\n                        (\"CurrentFiscalYearEndDate\", \"DocumentFiscalYearFocus\", \"DocumentFiscalPeriodFocus\")),\n                      ((\"10-K\", \"10-KT\", \"10-Q\", \"10-QT\", \"20-F\",\n                        \"10-K/A\", \"10-KT/A\", \"10-Q/A\", \"10-QT/A\", \"20-F/A\",\n                        \"10\", \"S-1\", \"S-3\", \"S-4\", \"S-11\", \"POS AM\",\n                        \"10/A\", \"S-1/A\", \"S-3/A\", \"S-4/A\", \"S-11/A\", \"K SDR\", \"L SDR\"),\n                        (\"EntityFilerCategory\",)),\n                       ((\"10-K\", \"10-KT\", \"20-F\", \"10-K/A\", \"10-KT/A\", \"20-F/A\"),\n                         (\"EntityWellKnownSeasonedIssuer\",)),\n                       ((\"SD\", \"SD/A\"),\n                         (\"EntityReportingCurrencyISOCode\", ))\n                ):\n                    if documentType in doctypesRequired:\n                        for deiItem in deiItemsRequired:\n                            if deiItem not in deiItems or not deiItems[deiItem]: #must exist and value must be non-empty (incl not nil)\n                                modelXbrl.log((\"WARNING\" if validateEFMpragmatic and deiItem in {\n                                                 \"CurrentFiscalYearEndDate\", \"DocumentFiscalPeriodFocus\", \"DocumentFiscalYearFocus\",\n                                                 \"EntityCurrentReportingStatus\", \"EntityFilerCategory\", \"EntityPublicFloat\", \n                                                 \"EntityVoluntaryFilers\", \"EntityWellKnownSeasonedIssuer\" \n                                                } else \"ERROR\"), \n                                              (\"EFM.6.05.21.{0}\".format(deiItem) if validateEFMpragmatic and deiItem in {\n                                                 \"CurrentFiscalYearEndDate\", \"DocumentFiscalPeriodFocus\", \"DocumentFiscalYearFocus\",\n                                                 \"EntityRegistrantName\", \"EntityCentralIndexKey\",\n                                                 \"EntityCurrentReportingStatus\", \"EntityFilerCategory\", \"EntityPublicFloat\", \n                                                 \"EntityVoluntaryFilers\", \"EntityWellKnownSeasonedIssuer\"\n                                                } else \"EFM.6.23.36\" if deiItem == \"EntityReportingCurrencyISOCode\"\n                                                  else \"EFM.6.05.21\"),\n                                                _(\"dei:%(elementName)s is required for DocumentType '%(documentType)s' of context %(contextID)s\"),\n                        modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType,\n                        elementName=deiItem,\n                        messageCodes=(\"EFM.6.05.21.CurrentFiscalYearEndDate\", \"EFM.6.05.21.DocumentFiscalPeriodFocus\", \"EFM.6.05.21.DocumentFiscalYearFocus\",\n                                      \"EFM.6.05.21.EntityRegistrantName\", \"EFM.6.05.21.EntityCentralIndexKey\",\n                                      \"EFM.6.05.21.EntityCurrentReportingStatus\", \"EFM.6.05.21.EntityFilerCategory\", \"EFM.6.05.21.EntityPublicFloat\", \n                                      \"EFM.6.05.21.EntityVoluntaryFilers\", \"EFM.6.05.21.EntityWellKnownSeasonedIssuer\",\n                                      \"EFM.6.23.36\", \"EFM.6.05.21\"))\n                                \n                if documentType in {\"10-K\", \"10-KT\", \"10-Q\", \"10-QT\", \"20-F\", \"40-F\",\n                                    \"10-K/A\", \"10-KT/A\", \"10-Q/A\", \"10-QT/A\", \"20-F/A\", \"40-F/A\"}:\n                    defaultContextSharesOutstandingValue = deiItems.get(\"EntityCommonStockSharesOutstanding\")\n                    errLevel = \"WARNING\" if validateEFMpragmatic else \"ERROR\"\n                    if commonSharesClassMembers:\n                        if defaultContextSharesOutstandingValue: # checks that it exists and is not empty or nil\n                            modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' but not in the default context because there are multiple classes of common shares\"),\n                                modelObject=documentTypeFact, contextID=documentTypeFact.contextID, documentType=documentType)\n                        elif len(commonSharesClassMembers) == 1: # and not hasDefinedStockAxis:\n                            modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' but but a default-context because only one class of stock\"),\n                                modelObject=documentTypeFact, documentType=documentType)\n                        ''' per Dean R, this test no longer makes sense because we don't check against def LB defined members\n                        missingClasses = commonSharesClassMembers - _DICT_SET(commonSharesItemsByStockClass.keys())\n                        if missingClasses:\n                            modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' but missing in these stock classes: %(stockClasses)s\"),\n                                modelObject=documentTypeFact, documentType=documentType, stockClasses=\", \".join([str(c) for c in missingClasses]))\n                        '''\n                        for mem, facts in commonSharesItemsByStockClass.items():\n                            if len(facts) != 1:\n                                modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                    _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' but only one per stock class %(stockClass)s\"),\n                                    modelObject=documentTypeFact, documentType=documentType, stockClass=mem)\n                            ''' removed per ARELLE-124 (should check measurement date vs report date)\n                            elif facts[0].context.instantDatetime != commonStockMeasurementDatetime:\n                                modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                    _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' in stock class %(stockClass)s with measurement date %(date)s\"),\n                                    modelObject=documentTypeFact, documentType=documentType, stockClass=mem, date=commonStockMeasurementDatetime)\n                            '''\n                    elif hasCommonSharesOutstandingDimensionedFactWithDefaultStockClass and not defaultContextSharesOutstandingValue:\n                            modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                                _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' but missing for a non-default-context fact\"),\n                                modelObject=documentTypeFact, documentType=documentType)\n                    elif not defaultContextSharesOutstandingValue: # missing, empty, or nil\n                        modelXbrl.log(errLevel, \"EFM.6.05.26\",\n                            _(\"dei:EntityCommonStockSharesOutstanding is required for DocumentType '%(documentType)s' in the default context because there are not multiple classes of common shares\"),\n                            modelObject=documentTypeFact, documentType=documentType)\n                if documentType in (\"SD\", \"SD/A\"): # SD documentType\n                    self.modelXbrl.profileActivity(\"... filer required facts checks (other than SD)\", minTimeToShow=1.0)\n                    rxdNs = None # find RXD schema\n                    rxdDoc = None\n                    hasRxdPre = hasRxdDef = False\n                    for rxdLoc in disclosureSystem.familyHrefs[\"RXD\"]:\n                        rxdUri = rxdLoc.href\n                        if rxdUri in modelXbrl.urlDocs:\n                            if rxdUri.endswith(\".xsd\") and rxdLoc.elements == \"1\":\n                                if rxdNs is None:\n                                    rxdDoc = modelXbrl.urlDocs[rxdUri]\n                                    rxdNs = rxdDoc.targetNamespace\n                                else:\n                                    modelXbrl.error(\"EFM.6.23.10\",\n                                        _(\"The DTS of must use only one version of the RXD schema\"),\n                                        modelObject=(rxdDoc, modelXbrl.urlDocs[rxdUri]), instance=instanceName)\n                            elif \"/rxd-pre-\" in rxdUri:\n                                hasRxdPre = True\n                            elif \"/rxd-def-\" in rxdUri:\n                                hasRxdDef = True\n                    if not hasRxdPre:\n                        modelXbrl.error(\"EFM.6.23.08\",\n                            _(\"The DTS must use a standard presentation linkbase from Family RXD in edgartaxonomies.xml.\"),\n                            modelObject=modelXbrl, instance=instanceName)\n                    if not hasRxdDef:\n                        modelXbrl.error(\"EFM.6.23.09\",\n                            _(\"The DTS must use a standard definition linkbase from Family RXD in edgartaxonomies.xml.\"),\n                            modelObject=modelXbrl, instance=instanceName)\n                    countryNs = None\n                    deiNS = None\n                    for url, doc in modelXbrl.urlDocs.items():\n                        if doc.type == ModelDocument.Type.SCHEMA:\n                            if url.startswith(\"http://xbrl.sec.gov/country/\"):\n                                if countryNs is None:\n                                    countryNs = doc.targetNamespace\n                                else:\n                                    modelXbrl.error(\"EFM.6.23.11\",\n                                        _(\"The DTS must use must use only one version of the COUNTRY schema.\"),\n                                        modelObject=(doc\n                                                     for url,doc in modelXbrl.urlDocs.items()\n                                                     if url.startswith(\"http://xbrl.sec.gov/country/\")), instance=instanceName)\n                            if disclosureSystem.deiNamespacePattern.match(doc.targetNamespace):\n                                deiNS = doc.targetNamespace\n\n                    if rxdNs:\n                        qn = ModelValue.qname(rxdNs, \"AmendmentNumber\")\n                        if amendmentFlag == \"true\" and (\n                                    qn not in modelXbrl.factsByQname or not any(\n                                           f.context is not None and not f.context.hasSegment \n                                           for f in modelXbrl.factsByQname[qn])):\n                            modelXbrl.error(\"EFM.6.23.06\",\n                                _(\"The value for dei:DocumentType, %(documentType)s, requires a value for rxd:AmendmentNumber in the Required Context.\"),\n                                modelObject=modelXbrl, documentType=documentType)\n                    else:\n                        modelXbrl.error(\"EFM.6.23.07\",\n                            _(\"The DTS must use a standard schema from Family RXD in edgartaxonomies.xml.\"),\n                            modelObject=modelXbrl, instance=instanceName)\n                    class Rxd(): # fake class of rxd qnames based on discovered rxd namespace\n                        def __init__(self):\n                            for name in (\"CountryAxis\", \"GovernmentAxis\", \"PaymentTypeAxis\", \"ProjectAxis\",\"PmtAxis\",\n                                        \"AllGovernmentsMember\", \"AllProjectsMember\",\"BusinessSegmentAxis\", \"EntityDomain\", \n                                        \"A\", \"Cm\", \"Co\", \"Cu\", \"D\", \"Gv\", \"E\", \"K\", \"Km\", \"P\", \"Payments\", \"Pr\", \"Sm\"):\n                                setattr(self, name, ModelValue.qname(rxdNs, \"rxd:\" + name))\n    \n                    rxd = Rxd()\n                    f1 = deiFacts.get(disclosureSystem.deiCurrentFiscalYearEndDateElement)\n                    if f1 is not None and documentPeriodEndDateFact is not None and f1.xValid >= VALID and documentPeriodEndDateFact.xValid >= VALID:\n                        d = ModelValue.dateunionDate(documentPeriodEndDateFact.xValue)# is an end date, convert back to a start date without midnight part\n                        if f1.xValue.month != d.month or f1.xValue.day != d.day:\n                            modelXbrl.error(\"EFM.6.23.26\",\n                                _(\"The dei:CurrentFiscalYearEndDate, %(fyEndDate)s does not match the dei:DocumentReportingPeriod %(reportingPeriod)s\"),\n                                modelObject=(f1,documentPeriodEndDateFact), fyEndDate=f1.value, reportingPeriod=documentPeriodEndDateFact.value)\n                    if (documentPeriodEndDateFact is not None and documentPeriodEndDateFact.xValid >= VALID and\n                        not any(f2.xValue == documentPeriodEndDateFact.xValue\n                                for f2 in modelXbrl.factsByQname[rxd.D]\n                                if f2.xValid >= VALID)):\n                        modelXbrl.error(\"EFM.6.23.27\",\n                            _(\"The dei:DocumentPeriodEndDate %(reportingPeriod)s has no corresponding rxd:D fact.\"),\n                            modelObject=documentPeriodEndDateFact, reportingPeriod=documentPeriodEndDateFact.value)\n                    for url,doc in modelXbrl.urlDocs.items():\n                        if (url not in disclosureSystem.standardTaxonomiesDict and\n                            doc.type == ModelDocument.Type.SCHEMA):\n                            for concept in XmlUtil.children(doc.xmlRootElement, XbrlConst.xsd, \"element\"):\n                                name = concept.name\n                                if not concept.isAbstract and not concept.isTextBlock:\n                                    modelXbrl.error(\"EFM.6.23.12\",\n                                        _(\"Extension concept %(concept)s is non-abstract and not a Text Block.\"),\n                                        modelObject=concept, schemaName=doc.basename, name=concept.name, concept=concept.qname)\n                                elif name.endswith(\"Table\") or name.endswith(\"Axis\") or name.endswith(\"Domain\"):\n                                    modelXbrl.error(\"EFM.6.23.13\",\n                                        _(\"Extension concept %(concept)s is not allowed in an extension schema.\"),\n                                        modelObject=concept, schemaName=doc.basename, name=concept.name, concept=concept.qname)\n                    self.modelXbrl.profileActivity(\"... SD checks 6-13, 26-27\", minTimeToShow=1.0)\n                    dimDefRelSet = modelXbrl.relationshipSet(XbrlConst.dimensionDefault)\n                    dimDomRelSet = modelXbrl.relationshipSet(XbrlConst.dimensionDomain)\n                    hypDimRelSet = modelXbrl.relationshipSet(XbrlConst.hypercubeDimension)\n                    hasHypRelSet = modelXbrl.relationshipSet(XbrlConst.all)\n                    for rel in dimDomRelSet.modelRelationships:\n                        if (isinstance(rel.fromModelObject, ModelConcept) and isinstance(rel.toModelObject, ModelConcept) and \n                            not dimDefRelSet.isRelated(rel.fromModelObject, \"child\", rel.toModelObject)):\n                            modelXbrl.error(\"EFM.6.23.14\",\n                                _(\"The target of the dimension-domain relationship in role %(linkrole)s from %(source)s to %(target)s must be the default member of %(source)s.\"),\n                                modelObject=(rel, rel.fromModelObject, rel.toModelObject), \n                                linkbaseName=rel.modelDocument.basename, linkrole=rel.linkrole,\n                                source=rel.fromModelObject.qname, target=rel.toModelObject.qname)\n                    domMemRelSet = modelXbrl.relationshipSet(XbrlConst.domainMember)\n                    memDim = {}\n                    def checkMemMultDims(memRel, dimRel, elt, ELR, visited):\n                        if elt not in visited:\n                            visited.add(elt)\n                            for rel in domMemRelSet.toModelObject(elt):\n                                if rel.consecutiveLinkrole == ELR and isinstance(rel.fromModelObject, ModelConcept):\n                                    checkMemMultDims(memRel, None, rel.fromModelObject, rel.linkrole, visited)\n                            for rel in dimDomRelSet.toModelObject(elt):\n                                if rel.consecutiveLinkrole == ELR:\n                                    dim = rel.fromModelObject\n                                    mem = memRel.toModelObject\n                                    if isinstance(dim, ModelConcept) and isinstance(mem, ModelConcept):\n                                        if dim.qname == rxd.PaymentTypeAxis and not mem.modelDocument.targetNamespace.startswith(\"http://xbrl.sec.gov/rxd/\"):\n                                            modelXbrl.error(\"EFM.6.23.17\",\n                                                _(\"The member %(member)s in dimension rxd:PaymentTypeAxis in linkrole %(linkrole)s must be a QName with namespace that begins with \\\"http://xbrl.sec.gov/rxd/\\\". \"),\n                                                modelObject=(rel, memRel, dim, mem), member=mem.qname, linkrole=rel.linkrole)\n                                        if dim.qname == rxd.CountryAxis and not mem.modelDocument.targetNamespace.startswith(\"http://xbrl.sec.gov/country/\"):\n                                            modelXbrl.error(\"EFM.6.23.18\",\n                                                _(\"The member %(member)s in dimension rxd:CountryAxis in linkrole %(linkrole)s must be a QName with namespace that begins with \\\"http://xbrl.sec.gov/country//\\\". \"),\n                                                modelObject=(rel, memRel, dim, mem), member=mem.qname, linkrole=rel.linkrole)\n                                        checkMemMultDims(memRel, rel, rel.fromModelObject, rel.linkrole, visited)\n                            for rel in hypDimRelSet.toModelObject(elt):\n                                if rel.consecutiveLinkrole == ELR and isinstance(rel.fromModelObject, ModelConcept):\n                                    checkMemMultDims(memRel, dimRel, rel.fromModelObject, rel.linkrole, visited)\n                            for rel in hasHypRelSet.toModelObject(elt):\n                                if rel.consecutiveLinkrole == ELR and isinstance(rel.fromModelObject, ModelConcept):\n                                    linkrole = rel.linkrole\n                                    mem = memRel.toModelObject\n                                    if (mem,linkrole) not in memDim:\n                                        memDim[mem,linkrole] = (dimRel, memRel)\n                                    else:\n                                        otherDimRel, otherMemRel = memDim[mem,linkrole]\n                                        modelXbrl.error(\"EFM.6.23.16\",\n                                            _(\"The member %(member)s has two dimensions, %(dimension1)s in linkrole %(linkrole1)s and  %(dimension2)s in linkrole %(linkrole2)s. \"),\n                                            modelObject=(dimRel, otherDimRel, memRel, otherMemRel, dimRel.fromModelObject, otherDimRel.fromModelObject),\n                                            member=mem.qname, dimension1=dimRel.fromModelObject.qname, linkrole1=linkrole, \n                                            dimension2=otherDimRel.fromModelObject.qname, linkrole2=otherDimRel.linkrole)\n                            visited.discard(elt)\n                    for rel in domMemRelSet.modelRelationships:\n                        if isinstance(rel.fromModelObject, ModelConcept) and isinstance(rel.toModelObject, ModelConcept):\n                            for rel2 in modelXbrl.relationshipSet(XbrlConst.domainMember, rel.consecutiveLinkrole).fromModelObject(rel.toModelObject):\n                                if rel2.fromModelObject is not None and rel2.toModelObject is not None:\n                                    modelXbrl.error(\"EFM.6.23.15\",\n                                        _(\"The domain-member relationship in %(linkrole)s from %(source)s to %(target)s is consecutive with domain-member relationship in %(linkrole2)s to %(target2)s. \"),\n                                        modelObject=(rel, rel.fromModelObject, rel.toModelObject), \n                                        linkrole=rel.linkrole, linkrole2=rel2.linkrole,\n                                        source=rel.fromModelObject.qname, target=rel.toModelObject.qname, target2=rel2.toModelObject.qname)\n                            checkMemMultDims(rel, None, rel.fromModelObject, rel.linkrole, set())\n                    self.modelXbrl.profileActivity(\"... SD checks 14-18\", minTimeToShow=1.0)\n                    qnDeiEntityDomain = ModelValue.qname(deiNS, \"dei:EntityDomain\")\n                    for relSet, dom, priItem, errCode in ((domMemRelSet, rxd.AllProjectsMember, rxd.Pr, \"EFM.6.23.30\"),\n                                                          (domMemRelSet, rxd.AllGovernmentsMember, rxd.Gv, \"EFM.6.23.31\"),\n                                                          (dimDomRelSet, rxd.BusinessSegmentAxis, rxd.Sm, \"EFM.6.23.33\"),\n                                                          (domMemRelSet, qnDeiEntityDomain, rxd.E, \"EFM.6.23.34\")):\n                        for f in modelXbrl.factsByQname[priItem]:\n                            if (not f.isNil and f.xValid >= VALID and\n                                not relSet.isRelated(dom, \"descendant\", f.xValue, isDRS=True)):\n                                modelXbrl.error(errCode,\n                                    _(\"The %(fact)s %(value)s in context %(context)s is not a %(domain)s.\"),\n                                    modelObject=f, fact=priItem, value=f.xValue, context=f.context.id, domain=dom,\n                                    messageCodes=(\"EFM.6.23.30\", \"EFM.6.23.31\", \"EFM.6.23.33\", \"EFM.6.23.34\"))\n                    self.modelXbrl.profileActivity(\"... SD checks 30, 31, 33, 34\", minTimeToShow=1.0)\n                    cntxEqualFacts = defaultdict(list)\n                    for f in modelXbrl.facts:\n                        if f.context is not None:\n                            cntxEqualFacts[f.context.contextDimAwareHash].append(f)\n                    self.modelXbrl.profileActivity(\"... SD prepare facts by context\", minTimeToShow=1.0)\n                    \n                    qnCurrencyMeasure = XbrlConst.qnIsoCurrency(deiItems.get(\"EntityReportingCurrencyISOCode\"))\n                    currencyMeasures = ([qnCurrencyMeasure],[])\n                    qnAllCountriesDomain = ModelValue.qname(countryNs, \"country:AllCountriesDomain\")\n                    for cntxFacts in cntxEqualFacts.values():\n                        qnameFacts = dict((f.qname,f) for f in cntxFacts)\n                        context = cntxFacts[0].context\n                        contextDims = cntxFacts[0].context.qnameDims\n                        # required priItem values based on context dimension\n                        for dim, priItem, errCode in ((rxd.PmtAxis, rxd.P, \"EFM.6.23.20\"),\n                                                      (rxd.GovernmentAxis, rxd.Payments, \"EFM.6.23.22\")):\n                            if context.hasDimension(dim) and (priItem not in qnameFacts or qnameFacts[priItem].isNil): \n                                modelXbrl.error(errCode,\n                                    _(\"The Context %(context)s has dimension %(dimension)s member %(member)s but is missing required fact %(fact)s\"),\n                                    modelObject=context, context=context.id, dimension=dim, member=context.dimMemberQname(dim), fact=priItem,\n                                    messageCodes=(\"EFM.6.23.20\", \"EFM.6.23.22\"))\n                        if (rxd.Co in qnameFacts and not qnameFacts[rxd.Co].isNil and\n                            not domMemRelSet.isRelated(qnAllCountriesDomain, \"descendant\", qnameFacts[rxd.Co].xValue, isDRS=True)):\n                            modelXbrl.error(\"EFM.6.23.44\",\n                                _(\"Fact rxd:Co value %(value)s in context %(context)s is not in the domain of country:AllCountriesDomain\"),\n                                modelObject=f, context=context.id, value=qnameFacts[rxd.Co].value)\n                        # required present facts based on other present fact\n                        for qnF, fNilOk, qnG, gNilOk, errCode in ((rxd.A, True, rxd.Cu, False, \"EFM.6.23.24\"),\n                                                                  (rxd.A, True, rxd.D, False, \"EFM.6.23.25\"),\n                                                                  (rxd.A, False, rxd.Gv, False, \"EFM.6.23.28\"),\n                                                                  (rxd.A, False, rxd.Co, False, \"EFM.6.23.29\"),\n                                                                  (rxd.Km, False, rxd.K, False, \"EFM.6.23.35\"),\n                                                                  (rxd.K, False, rxd.Km, False, \"EFM.6.23.35\"),\n                                                                  (rxd.Cm, False, rxd.Cu, False, \"EFM.6.23.39\"),\n                                                                  (rxd.K, False, rxd.A, False, \"EFM.6.23.42\"),\n                                                                  (rxd.Pr, False, rxd.A, False, \"EFM.6.23.43\")):\n                            if (qnF in qnameFacts and (fNilOk or not qnameFacts[qnF].isNil) and\n                                (qnG not in qnameFacts or (not gNilOk and qnameFacts[qnG].isNil))): \n                                modelXbrl.error(errCode,\n                                    _(\"The Context %(context)s has a %(fact1)s and is missing required %(fact2NotNil)sfact %(fact2)s\"),\n                                    modelObject=qnameFacts[qnF], context=context.id, fact1=qnF, fact2=qnG, fact2NotNil=\"\" if gNilOk else \"non-nil \",\n                                    messageCodes=(\"EFM.6.23.24\", \"EFM.6.23.25\", \"EFM.6.23.28\", \"EFM.6.23.29\", \"EFM.6.23.35\",\n                                                  \"EFM.6.23.35\", \"EFM.6.23.39\", \"EFM.6.23.42\", \"EFM.6.23.43\"))\n                        for f in cntxFacts:\n                            if (not context.hasDimension(rxd.PmtAxis) and f.isNumeric and \n                                f.unit is not None and f.unit.measures != currencyMeasures):\n                                modelXbrl.error(\"EFM.6.23.37\",\n                                    _(\"Fact %(fact)s in context %(context)s has unit %(unit)s not matching dei:EntityReportingCurrencyISOCode %(currency)s\"),\n                                    modelObject=f, fact=f.qname, context=context.id, unit=f.unit.value, currency=qnCurrencyMeasure)\n                        \n                        if (rxd.A in qnameFacts and not qnameFacts[rxd.A].isNil and\n                            rxd.Cm in qnameFacts and not qnameFacts[rxd.Cm].isNil and\n                            qnameFacts[rxd.A].unit is not None and qnameFacts[rxd.A].unit.measures == currencyMeasures): \n                            modelXbrl.error(\"EFM.6.23.38\",\n                                _(\"A value cannot be given for rxd:Cm in context %(context)s because the payment is in the reporting currency %(currency)s.\"),\n                                modelObject=(qnameFacts[rxd.A],qnameFacts[rxd.Cm]), context=context.id, currency=qnCurrencyMeasure)\n                        if (rxd.A in qnameFacts and \n                            rxd.Cu in qnameFacts and not qnameFacts[rxd.Cu].isNil and\n                            qnameFacts[rxd.A].unit is not None and qnameFacts[rxd.A].unit.measures != ([XbrlConst.qnIsoCurrency(qnameFacts[rxd.Cu].xValue)],[])): \n                            modelXbrl.error(\"EFM.6.23.41\",\n                                _(\"The unit %(unit)s of rxd:A in context %(context)s is not consistent with the value %(currency)s of rxd:Cu.\"),\n                                modelObject=(qnameFacts[rxd.A],qnameFacts[rxd.Cu]), context=context.id, unit=qnameFacts[rxd.A].unit.value, currency=qnameFacts[rxd.Cu].value)\n                                                    \n                        if (context.hasDimension(rxd.ProjectAxis) and\n                            not any(f.xValue == m\n                                    for m in (contextDims[rxd.ProjectAxis].memberQname,)\n                                    for f in modelXbrl.factsByQname[rxd.Pr]\n                                    if f.context is not None)):\n                            modelXbrl.error(\"EFM.6.23.19\",\n                                _(\"The Context %(context)s has dimension %(dimension)s but is missing any payment.\"),\n                                modelObject=context, context=context.id, dimension=rxd.GovernmentAxis)\n                        if (context.hasDimension(rxd.GovernmentAxis) and\n                            not any(f.xValue == m and f.context.hasDimension(rxd.PmtAxis)\n                                    for m in (contextDims[rxd.GovernmentAxis].memberQname,)\n                                    for f in modelXbrl.factsByQname[rxd.Gv]\n                                    if f.context is not None)):\n                            modelXbrl.error(\"EFM.6.23.21\",\n                                _(\"The Context %(context)s has dimension %(dimension)s member %(member)s but is missing any payment.\"),\n                                modelObject=context, context=context.id, dimension=rxd.GovernmentAxis, member=context.dimMemberQname(rxd.GovernmentAxis))\n                        if rxd.P in qnameFacts and not any(f.context is not None and not f.context.hasSegment\n                                                           for f in modelXbrl.factsByQname.get(qnameFacts[rxd.P].xValue,())):\n                            modelXbrl.error(\"EFM.6.23.23\",\n                                _(\"The Context %(context)s has payment type %(paymentType)s but is missing a corresponding fact in the required context.\"),\n                                modelObject=context, context=context.id, paymentType=qnameFacts[rxd.P].xValue)\n                        if not context.hasDimension(rxd.PmtAxis) and rxd.A in qnameFacts and not qnameFacts[rxd.A].isNil:\n                            modelXbrl.error(\"EFM.6.23.40\",\n                                _(\"There is a non-nil rxd:A in context %(context)s but missing a dimension rxd:PmtAxis.\"),\n                                modelObject=(context, qnameFacts[rxd.A]), context=context.id)\n                    self.modelXbrl.profileActivity(\"... SD by context for 19-25, 28-29, 35, 37-39, 40-44\", minTimeToShow=1.0)\n                    for f in modelXbrl.factsByQname[rxd.D]:\n                        if not f.isNil and f.xValid >= VALID and f.xValue + datetime.timedelta(1) != f.context.endDatetime: # date needs to be midnite to compare to datetime\n                            modelXbrl.error(\"EFM.6.23.32\",\n                                _(\"The rxd:D %(value)s in context %(context)s does not match the context end date %(endDate)s.\"),\n                                modelObject=f, value=f.xValue, context=f.context.id, endDate=XmlUtil.dateunionValue(f.context.endDatetime, subtractOneDay=True))\n                    self.modelXbrl.profileActivity(\"... SD checks 32 (last SD check)\", minTimeToShow=1.0)\n                    # deference object references no longer needed\n                    del rxdDoc, cntxEqualFacts\n                    # dereference compatibly with 2.7 (as these may be used in nested contexts above\n                    hasHypRelSet = hypDimRelSet = dimDefRelSet = domMemRelSet = dimDomRelSet = None\n                    memDim.clear()\n                else: # non-SD documentType\n                    pass # no non=SD tests yet\n            elif disclosureSystem.GFM:\n                for deiItem in (\n                        disclosureSystem.deiCurrentFiscalYearEndDateElement, \n                        disclosureSystem.deiDocumentFiscalYearFocusElement, \n                        disclosureSystem.deiFilerNameElement):\n                    if deiItem not in deiItems or deiItems[deiItem] == \"\":\n                        modelXbrl.error(\"GFM.3.02.01\",\n                            _(\"dei:%(elementName)s is required in the default context\"),\n                            modelXbrl=modelXbrl, elementName=deiItem)\n            if documentType not in (\"SD\", \"SD/A\"):\n                self.modelXbrl.profileActivity(\"... filer required facts checks\", minTimeToShow=1.0)\n    \n            #6.5.27 footnote elements, etc\n            footnoteLinkNbr = 0\n            for footnoteLinkElt in xbrlInstDoc.iterdescendants(tag=\"{http://www.xbrl.org/2003/linkbase}footnoteLink\"):\n                if isinstance(footnoteLinkElt,ModelObject):\n                    footnoteLinkNbr += 1\n                    \n                    linkrole = footnoteLinkElt.get(\"{http://www.w3.org/1999/xlink}role\")\n                    if linkrole != XbrlConst.defaultLinkRole:\n                        modelXbrl.error((\"EFM.6.05.28.linkrole\", \"GFM.1.02.20\"),\n                            _(\"FootnoteLink %(footnoteLinkNumber)s has disallowed role %(linkrole)s\"),\n                            modelObject=footnoteLinkElt, footnoteLinkNumber=footnoteLinkNbr, linkrole=linkrole)\n        \n                    # find modelLink of this footnoteLink\n                    # modelLink = modelXbrl.baseSetModelLink(footnoteLinkElt)\n                    relationshipSet = modelXbrl.relationshipSet(\"XBRL-footnotes\", linkrole)\n                    #if (modelLink is None) or (not relationshipSet):\n                    #    continue    # had no child elements to parse\n                    locNbr = 0\n                    arcNbr = 0\n                    for child in footnoteLinkElt:\n                        if isinstance(child,ModelObject):\n                            xlinkType = child.get(\"{http://www.w3.org/1999/xlink}type\")\n                            if child.namespaceURI != XbrlConst.link or \\\n                               xlinkType not in (\"locator\", \"resource\", \"arc\") or \\\n                               child.localName not in (\"loc\", \"footnote\", \"footnoteArc\"):\n                                    modelXbrl.error((\"EFM.6.05.27\", \"GFM.1.02.19\"),\n                                        _(\"FootnoteLink %(footnoteLinkNumber)s has disallowed child element %(elementName)s\"),\n                                        modelObject=child, footnoteLinkNumber=footnoteLinkNbr, elementName=child.prefixedName)\n                            elif xlinkType == \"locator\":\n                                locNbr += 1\n                                locrole = child.get(\"{http://www.w3.org/1999/xlink}role\")\n                                if locrole is not None and (disclosureSystem.GFM or \\\n                                                            not disclosureSystem.uriAuthorityValid(locrole)): \n                                    modelXbrl.error((\"EFM.6.05.29\", \"GFM.1.02.21\"),\n                                        _(\"FootnoteLink %(footnoteLinkNumber)s loc %(locNumber)s has disallowed role %(role)s\"),\n                                        modelObject=child, footnoteLinkNumber=footnoteLinkNbr, \n                                        xlinkLabel=child.xlinkLabel,\n                                        locNumber=locNbr, role=locrole)\n                                href = child.get(\"{http://www.w3.org/1999/xlink}href\")\n                                if not href.startswith(\"#\"): \n                                    modelXbrl.error((\"EFM.6.05.32\", \"GFM.1.02.23\"),\n                                        _(\"FootnoteLink %(footnoteLinkNumber)s loc %(locNumber)s has disallowed href %(locHref)s\"),\n                                        modelObject=child, footnoteLinkNumber=footnoteLinkNbr, locNumber=locNbr, locHref=href,\n                                        locLabel=child.get(\"{http://www.w3.org/1999/xlink}label\"))\n                                else:\n                                    label = child.get(\"{http://www.w3.org/1999/xlink}label\")\n                            elif xlinkType == \"arc\":\n                                arcNbr += 1\n                                arcrole = child.get(\"{http://www.w3.org/1999/xlink}arcrole\")\n                                if (self.validateEFM and not disclosureSystem.uriAuthorityValid(arcrole)) or \\\n                                   (disclosureSystem.GFM  and arcrole != XbrlConst.factFootnote and arcrole != XbrlConst.factExplanatoryFact): \n                                    modelXbrl.error((\"EFM.6.05.30\", \"GFM.1.02.22\"),\n                                        _(\"FootnoteLink %(footnoteLinkNumber)s arc %(arcNumber)s has disallowed arcrole %(arcrole)s\"),\n                                        modelObject=child, footnoteLinkNumber=footnoteLinkNbr, arcNumber=arcNbr, \n                                        arcToLabel=child.get(\"{http://www.w3.org/1999/xlink}to\"),\n                                        arcrole=arcrole)\n                            elif xlinkType == \"resource\": # footnote\n                                footnoterole = child.get(\"{http://www.w3.org/1999/xlink}role\")\n                                if footnoterole == \"\":\n                                    modelXbrl.error((\"EFM.6.05.28.missingRole\", \"GFM.1.2.20\"),\n                                        _(\"Footnote %(xlinkLabel)s is missing a role\"),\n                                        modelObject=child, xlinkLabel=child.get(\"{http://www.w3.org/1999/xlink}label\"))\n                                elif (self.validateEFM and not disclosureSystem.uriAuthorityValid(footnoterole)) or \\\n                                     (disclosureSystem.GFM  and footnoterole != XbrlConst.footnote): \n                                    modelXbrl.error((\"EFM.6.05.28\", \"GFM.1.2.20\"),\n                                        _(\"Footnote %(xlinkLabel)s has disallowed role %(role)s\"),\n                                        modelObject=child, xlinkLabel=child.get(\"{http://www.w3.org/1999/xlink}label\"),\n                                        role=footnoterole)\n                                if self.validateEFM:\n                                    ValidateFilingText.validateFootnote(modelXbrl, child)\n                                # find modelResource for this element\n                                foundFact = False\n                                if XmlUtil.text(child) != \"\":\n                                    if relationshipSet:\n                                        for relationship in relationshipSet.toModelObject(child):\n                                            if isinstance(relationship.fromModelObject, ModelFact):\n                                                foundFact = True\n                                                break\n                                    if not foundFact:\n                                        modelXbrl.error((\"EFM.6.05.33\", \"GFM.1.02.24\"),\n                                            _(\"FootnoteLink %(footnoteLinkNumber)s footnote %(footnoteLabel)s has no linked fact\"),\n                                            modelObject=child, footnoteLinkNumber=footnoteLinkNbr, \n                                            footnoteLabel=child.get(\"{http://www.w3.org/1999/xlink}label\"),\n                                            text=XmlUtil.text(child)[:100])\n            self.modelXbrl.profileActivity(\"... filer rfootnotes checks\", minTimeToShow=1.0)\n\n        # entry point schema checks\n        elif modelXbrl.modelDocument.type == ModelDocument.Type.SCHEMA:\n            if self.validateSBRNL:\n                # entry must have a P-link\n                if not any(hrefElt.localName == \"linkbaseRef\" and hrefElt.get(\"{http://www.w3.org/1999/xlink}role\") == \"http://www.xbrl.org/2003/role/presentationLinkbaseRef\"\n                           for hrefElt, hrefDoc, hrefId in modelXbrl.modelDocument.hrefObjects):\n                    modelXbrl.error(\"SBR.NL.2.2.10.01\",\n                        'Entrypoint schema must have a presentation linkbase', modelObject=modelXbrl.modelDocument)\n        # all-labels and references checks\n        defaultLangStandardLabels = {}\n        for concept in modelXbrl.qnameConcepts.values():\n            conceptHasDefaultLangStandardLabel = False\n            for modelLabelRel in labelsRelationshipSet.fromModelObject(concept):\n                modelLabel = modelLabelRel.toModelObject\n                role = modelLabel.role\n                text = modelLabel.text\n                lang = modelLabel.xmlLang\n                if role == XbrlConst.documentationLabel:\n                    if concept.modelDocument.targetNamespace in disclosureSystem.standardTaxonomiesDict:\n                        modelXbrl.error((\"EFM.6.10.05\", \"GFM.1.05.05\", \"SBR.NL.2.1.0.08\"),\n                            _(\"Concept %(concept)s of a standard taxonomy cannot have a documentation label: %(text)s\"),\n                            modelObject=modelLabel, concept=concept.qname, text=text)\n                elif text and lang and disclosureSystem.defaultXmlLang and lang.startswith(disclosureSystem.defaultXmlLang):\n                    if role == XbrlConst.standardLabel:\n                        if text in defaultLangStandardLabels:\n                            concept2, modelLabel2 = defaultLangStandardLabels[text]\n                            modelXbrl.error((\"EFM.6.10.04\", \"GFM.1.05.04\"),\n                                _(\"Same labels for concepts %(concept)s and %(concept2)s for %(lang)s standard role: %(text)s.\"),\n                                modelObject=(concept, modelLabel, concept2, modelLabel2), \n                                concept=concept.qname, \n                                concept2=concept2.qname, \n                                lang=disclosureSystem.defaultLanguage, text=text[:80])\n                        else:\n                            defaultLangStandardLabels[text] = (concept, modelLabel)\n                        conceptHasDefaultLangStandardLabel = True\n                    if len(text) > 511:\n                        modelXbrl.error((\"EFM.6.10.06\", \"GFM.1.05.06\"),\n                            _(\"Label for concept %(concept)s role %(role)s length %(length)s must be shorter than 511 characters: %(text)s\"),\n                            modelObject=modelLabel, concept=concept.qname, role=role, length=len(text), text=text[:80])\n                    match = modelXbrl.modelManager.disclosureSystem.labelCheckPattern.search(text)\n                    if match:\n                        modelXbrl.error((\"EFM.6.10.06\", \"GFM.1.05.07\", \"SBR.NL.2.3.8.07\"),\n                            'Label for concept %(concept)s role %(role)s has disallowed characters: \"%(text)s\"',\n                            modelObject=modelLabel, concept=concept.qname, role=role, text=match.group())\n                if (text is not None and len(text) > 0 and \n                    modelXbrl.modelManager.disclosureSystem.labelTrimPattern and\n                   (modelXbrl.modelManager.disclosureSystem.labelTrimPattern.match(text[0]) or \\\n                    modelXbrl.modelManager.disclosureSystem.labelTrimPattern.match(text[-1]))):\n                    modelXbrl.error((\"EFM.6.10.08\", \"GFM.1.05.08\"),\n                        _(\"Label for concept %(concept)s role %(role)s lang %(lang)s is not trimmed: %(text)s\"),\n                        modelObject=modelLabel, concept=concept.qname, role=role, lang=lang, text=text)\n            for modelRefRel in referencesRelationshipSetWithProhibits.fromModelObject(concept):\n                modelReference = modelRefRel.toModelObject\n                text = XmlUtil.innerText(modelReference)\n                #6.18.1 no reference to company extension concepts\n                if concept.modelDocument.targetNamespace not in disclosureSystem.standardTaxonomiesDict:\n                    modelXbrl.error((\"EFM.6.18.01\", \"GFM.1.9.1\"),\n                        _(\"References for extension concept %(concept)s are not allowed: %(text)s\"),\n                        modelObject=modelReference, concept=concept.qname, text=text, xml=XmlUtil.xmlstring(modelReference, stripXmlns=True, contentsOnly=True))\n                elif (self.validateEFM or self.validateSBRNL) and not self.isStandardUri(modelRefRel.modelDocument.uri): \n                    #6.18.2 no extension to add or remove references to standard concepts\n                    modelXbrl.error((\"EFM.6.18.02\", \"SBR.NL.2.1.0.08\"),\n                        _(\"References for standard taxonomy concept %(concept)s are not allowed in an extension linkbase: %(text)s\"),\n                        modelObject=modelReference, concept=concept.qname, text=text, xml=XmlUtil.xmlstring(modelReference, stripXmlns=True, contentsOnly=True))\n            if self.validateSBRNL and (concept.isItem or concept.isTuple):\n                if concept.modelDocument.targetNamespace not in disclosureSystem.standardTaxonomiesDict:\n                    if not conceptHasDefaultLangStandardLabel:\n                        modelXbrl.error(\"SBR.NL.2.2.2.26\",\n                            _(\"Concept %(concept)s missing standard label in local language.\"),\n                            modelObject=concept, concept=concept.qname)\n                    subsGroup = concept.get(\"substitutionGroup\")\n                    if ((not concept.isAbstract or subsGroup == \"sbr:presentationItem\") and\n                        not (presentationRelationshipSet.toModelObject(concept) or\n                             presentationRelationshipSet.fromModelObject(concept))):\n                        modelXbrl.error(\"SBR.NL.2.2.2.04\",\n                            _(\"Concept %(concept)s not referred to by presentation relationship.\"),\n                            modelObject=concept, concept=concept.qname)\n                    elif ((concept.isDimensionItem or\n                          (subsGroup and (subsGroup.endswith(\":domainItem\") or subsGroup.endswith(\":domainMemberItem\")))) and\n                        not (presentationRelationshipSet.toModelObject(concept) or\n                             presentationRelationshipSet.fromModelObject(concept))):\n                        modelXbrl.error(\"SBR.NL.2.2.10.03\",\n                            _(\"DTS concept %(concept)s not referred to by presentation relationship.\"),\n                            modelObject=concept, concept=concept.qname)\n                    if (concept.substitutionGroupQname and \n                        concept.substitutionGroupQname.namespaceURI not in disclosureSystem.baseTaxonomyNamespaces):\n                        modelXbrl.error(\"SBR.NL.2.2.2.05\",\n                            _(\"Concept %(concept)s has a substitutionGroup of a non-standard concept.\"),\n                            modelObject=concept, concept=concept.qname)\n                            \n                    if concept.isTuple: # verify same presentation linkbase nesting\n                        for missingQname in set(concept.type.elements) ^ pLinkedNonAbstractDescendantQnames(modelXbrl, concept):\n                            modelXbrl.error(\"SBR.NL.2.3.4.01\",\n                                _(\"Tuple %(concept)s has mismatch between content and presentation children: %(missingQname)s.\"),\n                                modelObject=concept, concept=concept.qname, missingQname=missingQname)\n                self.checkConceptLabels(modelXbrl, labelsRelationshipSet, disclosureSystem, concept)\n                self.checkConceptLabels(modelXbrl, genLabelsRelationshipSet, disclosureSystem, concept)\n\n        # role types checks\n        # 6.7.10 only one role type declaration in DTS\n        for roleURI, modelRoleTypes in modelXbrl.roleTypes.items():\n            if len(modelRoleTypes) > 1:\n                modelXbrl.error((\"EFM.6.07.10\", \"GFM.1.03.10\"),\n                    _(\"RoleType %(roleType)s is defined in multiple taxonomies\"),\n                    modelObject=modelRoleTypes, roleType=roleURI, numberOfDeclarations=len(modelRoleTypes))\n        # 6.7.14 only one arcrole type declaration in DTS\n        for arcroleURI, modelRoleTypes in modelXbrl.arcroleTypes.items():\n            if len(modelRoleTypes) > 1:\n                modelXbrl.error((\"EFM.6.07.14\", \"GFM.1.03.16\"),\n                    _(\"ArcroleType %(arcroleType)s is defined in multiple taxonomies\"),\n                    modelObject=modelRoleTypes, arcroleType=arcroleURI, numberOfDeclarations=len(modelRoleTypes) )\n                    \n\n        self.modelXbrl.profileActivity(\"... filer concepts checks\", minTimeToShow=1.0)\n\n        del defaultLangStandardLabels #dereference\n        \n        # checks on all documents: instance, schema, instance\n        ValidateFilingDTS.checkDTS(self, modelXbrl.modelDocument, [])\n        ''' removed RH 2011-12-23, corresponding use of nameWordsTable in ValidateFilingDTS\n        if self.validateSBRNL:\n            del self.nameWordsTable\n        '''\n        self.modelXbrl.profileActivity(\"... filer DTS checks\", minTimeToShow=1.0)\n\n        # checks for namespace clashes\n        if self.validateEFM:\n            # check number of us-roles taxonomies referenced\n            for conflictClass, modelDocuments in self.standardNamespaceConflicts.items():\n                if len(modelDocuments) > 1:\n                    modelXbrl.error(\"EFM.6.22.03\",\n                        _(\"References for conflicting standard %(conflictClass)s taxonomies %(namespaceConflicts)s are not allowed in same DTS\"),\n                        modelObject=modelXbrl, conflictClass=conflictClass, \n                        namespaceConflicts=sorted((d.targetNamespace for d in modelDocuments),\n                                                  key=lambda ns: ns.rpartition('/')[2]))\n            \n        conceptRelsUsedWithPreferredLabels = defaultdict(list)\n        usedCalcsPresented = defaultdict(set) # pairs of concepts objectIds used in calc\n        usedCalcFromTosELR = {}\n        localPreferredLabels = defaultdict(set)\n        drsELRs = set()\n        \n        # do calculation, then presentation, then other arcroles\n        self.summationItemRelsSetAllELRs = modelXbrl.relationshipSet(XbrlConst.summationItem)\n        for arcroleFilter in (XbrlConst.summationItem, XbrlConst.parentChild, \"*\"):\n            for baseSetKey, baseSetModelLinks  in modelXbrl.baseSets.items():\n                arcrole, ELR, linkqname, arcqname = baseSetKey\n                if ELR and linkqname and arcqname and not arcrole.startswith(\"XBRL-\"):\n                    # assure summationItem, then parentChild, then others\n                    if not (arcroleFilter == arcrole or\n                            arcroleFilter == \"*\" and arcrole not in (XbrlConst.summationItem, XbrlConst.parentChild)):\n                        continue\n                    if self.validateEFMorGFM or (self.validateSBRNL and arcrole == XbrlConst.parentChild):\n                        ineffectiveArcs = ModelRelationshipSet.ineffectiveArcs(baseSetModelLinks, arcrole)\n                        #validate ineffective arcs\n                        for modelRel in ineffectiveArcs:\n                            if modelRel.fromModelObject is not None and modelRel.toModelObject is not None:\n                                modelXbrl.error((\"EFM.6.09.03\", \"GFM.1.04.03\", \"SBR.NL.2.3.4.06\"),\n                                    _(\"Ineffective arc %(arc)s in \\nlink role %(linkrole)s \\narcrole %(arcrole)s \\nfrom %(conceptFrom)s \\nto %(conceptTo)s \\n%(ineffectivity)s\"),\n                                    modelObject=modelRel, arc=modelRel.qname, arcrole=modelRel.arcrole,\n                                    linkrole=modelRel.linkrole, linkroleDefinition=modelXbrl.roleTypeDefinition(modelRel.linkrole), \n                                    conceptFrom=modelRel.fromModelObject.qname, conceptTo=modelRel.toModelObject.qname, \n                                    ineffectivity=modelRel.ineffectivity)\n                    if arcrole == XbrlConst.parentChild:\n                        isStatementSheet = any(linkroleDefinitionStatementSheet.match(roleType.definition or '')\n                                               for roleType in self.modelXbrl.roleTypes.get(ELR,()))\n                        conceptsPresented = set()\n                        # 6.12.2 check for distinct order attributes\n                        parentChildRels = modelXbrl.relationshipSet(arcrole, ELR)\n                        for relFrom, siblingRels in parentChildRels.fromModelObjects().items():\n                            targetConceptPreferredLabels = defaultdict(dict)\n                            orderRels = {}\n                            firstRel = True\n                            relFromUsed = True\n                            for rel in siblingRels:\n                                if firstRel:\n                                    firstRel = False\n                                    if relFrom in conceptsUsed:\n                                        conceptsUsed[relFrom] = True # 6.12.3, has a pres relationship\n                                        relFromUsed = True\n                                relTo = rel.toModelObject\n                                preferredLabel = rel.preferredLabel\n                                if relTo in conceptsUsed:\n                                    conceptsUsed[relTo] = True # 6.12.3, has a pres relationship\n                                    if preferredLabel and preferredLabel != \"\":\n                                        conceptRelsUsedWithPreferredLabels[relTo].append(rel)\n                                        if self.validateSBRNL and preferredLabel in (\"periodStart\",\"periodEnd\"):\n                                            modelXbrl.error(\"SBR.NL.2.3.4.03\",\n                                                _(\"Preferred label on presentation relationships not allowed\"), modelObject=modelRel)\n                                    # 6.12.5 distinct preferred labels in base set\n                                    preferredLabels = targetConceptPreferredLabels[relTo]\n                                    if (preferredLabel in preferredLabels or\n                                        (self.validateSBRNL and not relFrom.isTuple and\n                                         (not preferredLabel or None in preferredLabels))):\n                                        if preferredLabel in preferredLabels:\n                                            rel2, relTo2 = preferredLabels[preferredLabel]\n                                        else:\n                                            rel2 = relTo2 = None\n                                        modelXbrl.error((\"EFM.6.12.05\", \"GFM.1.06.05\", \"SBR.NL.2.3.4.06\"),\n                                            _(\"Concept %(concept)s has duplicate preferred label %(preferredLabel)s in link role %(linkrole)s\"),\n                                            modelObject=(rel, relTo, rel2, relTo2), \n                                            concept=relTo.qname, fromConcept=rel.fromModelObject.qname,\n                                            preferredLabel=preferredLabel, linkrole=rel.linkrole, linkroleDefinition=modelXbrl.roleTypeDefinition(rel.linkrole))\n                                    else:\n                                        preferredLabels[preferredLabel] = (rel, relTo)\n                                    if relFromUsed:\n                                        # 6.14.5\n                                        conceptsPresented.add(relFrom.objectIndex)\n                                        conceptsPresented.add(relTo.objectIndex)\n                                order = rel.order\n                                if order in orderRels:\n                                    modelXbrl.error((\"EFM.6.12.02\", \"GFM.1.06.02\", \"SBR.NL.2.3.4.05\"),\n                                        _(\"Duplicate presentation relations from concept %(conceptFrom)s for order %(order)s in base set role %(linkrole)s to concept %(conceptTo)s and to concept %(conceptTo2)s\"),\n                                        modelObject=(rel, orderRels[order]), conceptFrom=relFrom.qname, order=rel.arcElement.get(\"order\"), linkrole=rel.linkrole, linkroleDefinition=modelXbrl.roleTypeDefinition(rel.linkrole),\n                                        conceptTo=rel.toModelObject.qname, conceptTo2=orderRels[order].toModelObject.qname)\n                                else:\n                                    orderRels[order] = rel\n                                if self.validateSBRNL and not relFrom.isTuple:\n                                    if relTo in localPreferredLabels:\n                                        if {None, preferredLabel} & localPreferredLabels[relTo]:\n                                            self.modelXbrl.error(\"SBR.NL.2.3.4.06\",\n                                                _(\"Non-distinguished preferredLabel presentation relations from concept %(conceptFrom)s in base set role %(linkrole)s\"),\n                                                modelObject=rel, conceptFrom=relFrom.qname, linkrole=rel.linkrole, conceptTo=relTo.qname)\n                                    localPreferredLabels[relTo].add(preferredLabel)\n                            targetConceptPreferredLabels.clear()\n                            orderRels.clear()\n                        localPreferredLabels.clear() # clear for next relationship\n                        for conceptPresented in conceptsPresented:\n                            if conceptPresented in usedCalcsPresented:\n                                usedCalcPairingsOfConcept = usedCalcsPresented[conceptPresented]\n                                if len(usedCalcPairingsOfConcept & conceptsPresented) > 0:\n                                    usedCalcPairingsOfConcept -= conceptsPresented\n                        # 6.15.02, 6.15.03 semantics checks for totals and calc arcs (by tree walk)\n                        if validateLoggingSemantic:\n                            for rootConcept in parentChildRels.rootConcepts:\n                                self.checkCalcsTreeWalk(parentChildRels, rootConcept, isStatementSheet, False, conceptsUsed, set())\n                    elif arcrole == XbrlConst.summationItem:\n                        if self.validateEFMorGFM:\n                            # 6.14.3 check for relation concept periods\n                            fromRelationships = modelXbrl.relationshipSet(arcrole,ELR).fromModelObjects()\n                            allElrRelSet = modelXbrl.relationshipSet(arcrole)\n                            for relFrom, rels in fromRelationships.items():\n                                orderRels = {}\n                                for rel in rels:\n                                    relTo = rel.toModelObject\n                                    # 6.14.03 must have matched period types across relationshp\n                                    if isinstance(relTo, ModelConcept) and relFrom.periodType != relTo.periodType:\n                                        self.modelXbrl.error((\"EFM.6.14.03\", \"GFM.1.07.03\"),\n                                            \"Calculation relationship period types mismatched in base set role %(linkrole)s from %(conceptFrom)s to %(conceptTo)s\",\n                                            modelObject=rel, linkrole=rel.linkrole, conceptFrom=relFrom.qname, conceptTo=relTo.qname, linkroleDefinition=self.modelXbrl.roleTypeDefinition(ELR))\n                                    # 6.14.5 concepts used must have pres in same ext link\n                                    if relFrom in conceptsUsed and relTo in conceptsUsed:\n                                        fromObjId = relFrom.objectIndex\n                                        toObjId = relTo.objectIndex\n                                        if fromObjId < toObjId:\n                                            usedCalcsPresented[fromObjId].add(toObjId)\n                                        else:\n                                            usedCalcsPresented[toObjId].add(fromObjId)\n                                            \n                                    order = rel.order\n                                    if order in orderRels and disclosureSystem.GFM:\n                                        self.modelXbrl.error((\"EFM.N/A\", \"GFM.1.07.06\"),\n                                            _(\"Duplicate calculations relations from concept %(conceptFrom)s for order %(order)s in base set role %(linkrole)s to concept %(conceptTo)s and to concept %(conceptTo2)s\"),\n                                            modelObject=(rel, orderRels[order]), linkrole=rel.linkrole, conceptFrom=relFrom.qname, order=order,\n                                            conceptTo=rel.toModelObject.qname, conceptTo2=orderRels[order].toModelObject.qname)\n                                    else:\n                                        orderRels[order] = rel\n                                directedCycleRels = self.directedCycle(relFrom,relFrom,fromRelationships,{relFrom})\n                                if directedCycleRels is not None:\n                                    self.modelXbrl.error((\"EFM.6.14.04\", \"GFM.1.07.04\"),\n                                        _(\"Calculation relationships have a directed cycle in base set role %(linkrole)s starting from %(concept)s\"),\n                                        modelObject=[relFrom] + directedCycleRels, linkrole=ELR, concept=relFrom.qname, linkroleDefinition=self.modelXbrl.roleTypeDefinition(ELR))\n                                orderRels.clear()\n                                # if relFrom used by fact and multiple calc networks from relFrom, test 6.15.04\n                                if rels and relFrom in conceptsUsed:\n                                    relFromAndTos = (relFrom.objectIndex,) + tuple(sorted((rel.toModelObject.objectIndex \n                                                                                           for rel in rels if isinstance(rel.toModelObject, ModelConcept))))\n                                    if relFromAndTos in usedCalcFromTosELR:\n                                        otherRels = usedCalcFromTosELR[relFromAndTos]\n                                        otherELR = otherRels[0].linkrole\n                                        self.modelXbrl.log(\"WARNING-SEMANTIC\", (\"EFM.6.15.04\", \"GFM.2.06.04\"),\n                                            _(\"Calculation relationships should have a same set of targets in %(linkrole)s and %(linkrole2)s starting from %(concept)s\"),\n                                            modelObject=[relFrom] + rels + otherRels, linkrole=ELR, linkrole2=otherELR, concept=relFrom.qname)\n                                    else:\n                                        usedCalcFromTosELR[relFromAndTos] = rels\n                                    \n                        elif self.validateSBRNL:\n                            # find a calc relationship to get the containing document name\n                            for modelRel in self.modelXbrl.relationshipSet(arcrole, ELR).modelRelationships:\n                                self.modelXbrl.error(\"SBR.NL.2.3.9.01\",\n                                    _(\"Calculation linkbase linkrole %(linkrole)s\"),\n                                    modelObject=modelRel, linkrole=ELR)\n                                break\n                                \n                    elif arcrole == XbrlConst.all or arcrole == XbrlConst.notAll:\n                        drsELRs.add(ELR)\n                        \n                    elif arcrole == XbrlConst.dimensionDomain or arcrole == XbrlConst.dimensionDefault and \\\n                         self.validateEFMorGFM:\n                        # 6.16.3 check domain targets in extension linkbases are domain items\n                        fromRelationships = modelXbrl.relationshipSet(arcrole,ELR).fromModelObjects()\n                        for relFrom, rels in fromRelationships.items():\n                            for rel in rels:\n                                relTo = rel.toModelObject\n    \n                                if not (isinstance(relTo, ModelConcept) and relTo.type is not None and relTo.type.isDomainItemType) and not self.isStandardUri(rel.modelDocument.uri):\n                                    self.modelXbrl.error((\"EFM.6.16.03\", \"GFM.1.08.03\"),\n                                        _(\"Definition relationship from %(conceptFrom)s to %(conceptTo)s in role %(linkrole)s requires domain item target\"),\n                                        modelObject=(rel, relFrom, relTo), conceptFrom=relFrom.qname, conceptTo=(relTo.qname if relTo is not None else None), linkrole=rel.linkrole)\n\n                    elif self.validateSBRNL:\n                        if arcrole == XbrlConst.dimensionDefault:\n                            for modelRel in self.modelXbrl.relationshipSet(arcrole).modelRelationships:\n                                self.modelXbrl.error(\"SBR.NL.2.3.6.05\",\n                                    _(\"Dimension-default in from %(conceptFrom)s to %(conceptTo)s in role %(linkrole)s is not allowed\"),\n                                    modelObject=modelRel, conceptFrom=modelRel.fromModelObject.qname, conceptTo=modelRel.toModelObject.qname, \n                                    linkrole=modelRel.linkrole)\n                        ''' removed per RH 2013-01-11\n                        if not (XbrlConst.isStandardArcrole(arcrole) or XbrlConst.isDefinitionOrXdtArcrole(arcrole)):\n                            for modelRel in self.modelXbrl.relationshipSet(arcrole).modelRelationships:\n                                relTo = modelRel.toModelObject\n                                relFrom = modelRel.fromModelObject\n                                if not ((isinstance(relFrom,ModelConcept) and isinstance(relTo,ModelConcept)) or\n                                        (relFrom.modelDocument.inDTS and\n                                         (relTo.qname == XbrlConst.qnGenLabel and modelRel.arcrole == XbrlConst.elementLabel) or\n                                         (relTo.qname == XbrlConst.qnGenReference and modelRel.arcrole == XbrlConst.elementReference) or\n                                         (relTo.qname == self.qnSbrLinkroleorder))):\n                                    self.modelXbrl.error(\"SBR.NL.2.3.2.07\",\n                                        _(\"The source and target of an arc must be in the DTS from %(elementFrom)s to %(elementTo)s, in linkrole %(linkrole)s, arcrole %(arcrole)s\"),\n                                        modelObject=modelRel, elementFrom=relFrom.qname, elementTo=relTo.qname, \n                                        linkrole=modelRel.linkrole, arcrole=arcrole)\n                            '''\n                           \n                    # definition tests (GFM only, for now)\n                    if XbrlConst.isDefinitionOrXdtArcrole(arcrole) and disclosureSystem.GFM: \n                        fromRelationships = modelXbrl.relationshipSet(arcrole,ELR).fromModelObjects()\n                        for relFrom, rels in fromRelationships.items():\n                            orderRels = {}\n                            for rel in rels:\n                                relTo = rel.toModelObject\n                                order = rel.order\n                                if order in orderRels and disclosureSystem.GFM:\n                                    self.modelXbrl.error(\"GFM.1.08.10\",\n                                        _(\"Duplicate definitions relations from concept %(conceptFrom)s for order %(order)s in base set role %(linkrole)s to concept %(conceptTo)s and to concept %(conceptTo2)s\"),\n                                        modelObject=(rel, relFrom, relTo), conceptFrom=relFrom.qname, order=order, linkrole=rel.linkrole, \n                                        conceptTo=rel.toModelObject.qname, conceptTo2=orderRels[order].toModelObject.qname)\n                                else:\n                                    orderRels[order] = rel\n                                if (arcrole not in (XbrlConst.dimensionDomain, XbrlConst.domainMember) and\n                                    rel.get(\"{http://xbrl.org/2005/xbrldt}usable\") == \"false\"):\n                                    self.modelXrl.error(\"GFM.1.08.11\",\n                                        _(\"Disallowed xbrldt:usable='false' attribute on %(arc)s relationship from concept %(conceptFrom)s in base set role %(linkrole)s to concept %(conceptTo)s\"),\n                                        modelObject=(rel, relFrom, relTo), arc=rel.qname, conceptFrom=relFrom.qname, linkrole=rel.linkrole, conceptTo=rel.toModelObject.qname)\n\n        del localPreferredLabels # dereference\n        del usedCalcFromTosELR\n        del self.summationItemRelsSetAllELRs\n\n        self.modelXbrl.profileActivity(\"... filer relationships checks\", minTimeToShow=1.0)\n\n                                \n        # checks on dimensions\n        ValidateFilingDimensions.checkDimensions(self, drsELRs)\n        self.modelXbrl.profileActivity(\"... filer dimensions checks\", minTimeToShow=1.0)\n                                        \n        for concept, hasPresentationRelationship in conceptsUsed.items():\n            if not hasPresentationRelationship:\n                self.modelXbrl.error((\"EFM.6.12.03\", \"GFM.1.6.3\"),\n                    _(\"Concept used in instance %(concept)s does not participate in an effective presentation relationship\"),\n                    modelObject=[concept] + list(modelXbrl.factsByQname[concept.qname]), concept=concept.qname)\n                \n        for fromIndx, toIndxs in usedCalcsPresented.items():\n            for toIndx in toIndxs:\n                fromModelObject = self.modelXbrl.modelObject(fromIndx)\n                toModelObject = self.modelXbrl.modelObject(toIndx)\n                calcRels = modelXbrl.relationshipSet(XbrlConst.summationItem) \\\n                                    .fromToModelObjects(fromModelObject, toModelObject, checkBothDirections=True)\n                fromFacts = self.modelXbrl.factsByQname[fromModelObject.qname]\n                toFacts = self.modelXbrl.factsByQname[toModelObject.qname]\n                fromFactContexts = set(f.context.contextNonDimAwareHash for f in fromFacts if f.context is not None)\n                contextId = backupId = None # for EFM message\n                for f in toFacts:\n                    if f.context is not None:\n                        if f.context.contextNonDimAwareHash in fromFactContexts:\n                            contextId = f.context.id\n                            break\n                        backupId = f.context.id\n                if contextId is None:\n                    contextId = backupId\n                self.modelXbrl.error((\"EFM.6.14.05\", \"GFM.1.7.5\"),\n                    _(\"Used calculation relationship from %(conceptFrom)s to %(conceptTo)s does not participate in an effective presentation relationship\"),\n                    modelObject=calcRels + [fromModelObject, toModelObject],\n                    linkroleDefinition=self.modelXbrl.roleTypeDefinition(calcRels[0].linkrole if calcRels else None),\n                    conceptFrom=self.modelXbrl.modelObject(fromIndx).qname, conceptTo=self.modelXbrl.modelObject(toIndx).qname, contextId=contextId)\n                \n        if disclosureSystem.defaultXmlLang:\n            for concept, preferredLabelRels in conceptRelsUsedWithPreferredLabels.items():\n                for preferredLabelRel in preferredLabelRels:\n                    preferredLabel = preferredLabelRel.preferredLabel\n                    hasDefaultLangPreferredLabel = False\n                    for modelLabelRel in labelsRelationshipSet.fromModelObject(concept):\n                        modelLabel = modelLabelRel.toModelObject\n                        if modelLabel.xmlLang.startswith(disclosureSystem.defaultXmlLang) and \\\n                           modelLabel.role == preferredLabel:\n                            hasDefaultLangPreferredLabel = True\n                            break\n                    if not hasDefaultLangPreferredLabel:\n                        self.modelXbrl.error(\"GFM.1.06.04\", # 6.12.04 now reserved: (\"EFM.6.12.04\", \"GFM.1.06.04\"),\n                            _(\"Concept %(concept)s missing %(lang)s preferred labels for role %(preferredLabel)s\"),\n                            modelObject=(preferredLabelRel, concept), concept=concept.qname, fromConcept=preferredLabelRel.fromModelObject.qname,\n                            lang=disclosureSystem.defaultLanguage, preferredLabel=preferredLabel)\n        del conceptRelsUsedWithPreferredLabels\n        \n        # 6 16 4, 1.16.5 Base sets of Domain Relationship Sets testing\n        self.modelXbrl.profileActivity(\"... filer preferred label checks\", minTimeToShow=1.0)\n        \n        ''' try moving to plug-in\n        if self.validateSBRNL:\n            # check presentation link roles for generic linkbase order number\n            ordersRelationshipSet = modelXbrl.relationshipSet(\"http://www.nltaxonomie.nl/2011/arcrole/linkrole-order\")\n            presLinkroleNumberURI = {}\n            presLinkrolesCount = 0\n            for countLinkroles in (True, False):\n                for roleURI, modelRoleTypes in modelXbrl.roleTypes.items():\n                    for modelRoleType in modelRoleTypes:\n                        if XbrlConst.qnLinkPresentationLink in modelRoleType.usedOns:\n                            if countLinkroles:\n                                presLinkrolesCount += 1\n                            else:\n                                if not ordersRelationshipSet:\n                                    modelXbrl.error(\"SBR.NL.2.2.3.06\",\n                                        _(\"Presentation linkrole %(linkrole)s missing order number relationship set\"),\n                                        modelObject=modelRoleType, linkrole=modelRoleType.roleURI)\n                                else:\n                                    order = None\n                                    for orderNumRel in ordersRelationshipSet.fromModelObject(modelRoleType):\n                                        order = getattr(orderNumRel.toModelObject, \"xValue\", \"(noPSVIvalue)\")\n                                        if order in presLinkroleNumberURI:\n                                            modelXbrl.error(\"SBR.NL.2.2.3.06\",\n                                                _(\"Presentation linkrole order number %(order)s of %(linkrole)s also used in %(otherLinkrole)s\"),\n                                                modelObject=modelRoleType, order=order, linkrole=modelRoleType.roleURI, otherLinkrole=presLinkroleNumberURI[order])\n                                        else:\n                                            presLinkroleNumberURI[order] = modelRoleType.roleURI\n                                    if not order:\n                                        modelXbrl.error(\"SBR.NL.2.2.3.06\",\n                                            _(\"Presentation linkrole %(linkrole)s missing order number\"),\n                                            modelObject=modelRoleType, linkrole=modelRoleType.roleURI)\n                if countLinkroles and presLinkrolesCount < 2:\n                    break   # don't check order numbers if only one presentation linkrole\n            # check arc role definitions for labels\n            for arcroleURI, modelRoleTypes in modelXbrl.arcroleTypes.items():\n                for modelRoleType in modelRoleTypes:\n                    if (not arcroleURI.startswith(\"http://xbrl.org/\") and \n                        modelRoleType.modelDocument.targetNamespace not in disclosureSystem.baseTaxonomyNamespaces and\n                        (not modelRoleType.genLabel(lang=\"nl\") or not modelRoleType.genLabel(lang=\"en\"))):\n                        modelXbrl.error(\"SBR.NL.2.2.4.02\",\n                            _(\"ArcroleType missing nl or en generic label: %(arcrole)s\"),\n                            modelObject=modelRoleType, arcrole=arcroleURI)\n\n            for domainElt in typedDomainElements:\n                if domainElt.modelDocument.targetNamespace not in disclosureSystem.baseTaxonomyNamespaces:\n                    if not domainElt.genLabel(fallbackToQname=False,lang=\"nl\"):\n                        modelXbrl.error(\"SBR.NL.2.2.8.01\",\n                            _(\"Typed dimension domain element %(concept)s must have a generic label\"),\n                            modelObject=domainElt, concept=domainElt.qname)\n                    if domainElt.type is not None and domainElt.type.localName == \"complexType\":\n                        modelXbrl.error(\"SBR.NL.2.2.8.02\",\n                            _(\"Typed dimension domain element %(concept)s has disallowed complex content\"),\n                            modelObject=domainElt, concept=domainElt.qname)\n                    \n            self.modelXbrl.profileActivity(\"... SBR role types and type facits checks\", minTimeToShow=1.0)\n        '''\n\n        if self.validateEFM:\n            for pluginXbrlMethod in pluginClassMethods(\"Validate.EFM.Finally\"):\n                pluginXbrlMethod(self, conceptsUsed)\n        elif self.validateSBRNL:\n            for pluginXbrlMethod in pluginClassMethods(\"Validate.SBRNL.Finally\"):\n                pluginXbrlMethod(self, conceptsUsed)\n        self.modelXbrl.profileActivity(\"... plug in '.Finally' checks\", minTimeToShow=1.0)\n        self.modelXbrl.profileStat(_(\"validate{0}\").format(modelXbrl.modelManager.disclosureSystem.validationType))\n        \n        modelXbrl.modelManager.showStatus(_(\"ready\"), 2000)", "label": "ValueError", "info": "dataset/ETHPy150Open Arelle/Arelle/arelle/ValidateFiling.py/ValidateFiling.validate"}

js = {"function": "def status(self, query='\\n', agent=None):\n        \"\"\"See :func:`burpui.misc.backend.interface.BUIbackend.status`\"\"\"\n        result = []\n        try:\n            self._logger('info', \"query: '{}'\".format(query.rstrip()))\n            qry = b''\n            if not query.endswith('\\n'):  # pragma: no cover\n                qry += '{0}\\n'.format(query).encode('utf-8')\n            else:\n                qry += query.encode('utf-8')\n            sock = socket.socket(self.family, socket.SOCK_STREAM)\n            sock.connect((self.host, self.port))\n            sock.send(qry)\n            sock.shutdown(socket.SHUT_WR)\n            fileobj = sock.makefile()\n            sock.close()\n            for line in fileobj.readlines():\n                line = line.rstrip('\\n')\n                if not line:\n                    continue\n                try:\n                    if not PY3:\n                        line = line.decode('utf-8', 'replace')\n                except __HOLE__:  # pragma: no cover\n                    pass\n                result.append(line)\n            fileobj.close()\n            self._logger('debug', '=> {}'.format(result))\n            return result\n        except socket.error:\n            self._logger('error', 'Cannot contact burp server at %s:%s', self.host, self.port)\n            raise BUIserverException('Cannot contact burp server at {0}:{1}'.format(self.host, self.port))", "label": "UnicodeDecodeError", "info": "dataset/ETHPy150Open ziirish/burp-ui/burpui/misc/backend/burp1.py/Burp.status"}

code = ' '.join(js['function'].split())
dfg, index_table, code_tokens = extract_dataflow(code, "python")

print(dfg)

code = ' '.join(js['function'].split())
dfg, index_table, code_tokens = extract_dataflow(code, "c")

print(dfg)